#+TITLE: Packages and configurations removed

* Auto-completion

#+begin_src emacs-lisp
  (use-package corfu
    :disabled t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-separator ?\s)          ;; Orderless field separator
    (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    :bind (:map corfu-map
                ("C-n"      . corfu-next)
                ("C-p"      . corfu-previous))
    :init
    (global-corfu-mode))

  ;; Add extensions
  (use-package cape
    :disabled t
    :custom
    (cape-line-buffer-function #'current-buffer)
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c e p" . completion-at-point) ;; capf
           ("C-c e t" . complete-tag)        ;; etags
           ("C-c e d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c e h" . cape-history)
           ("C-c e f" . cape-file)
           ("C-c e k" . cape-keyword)
           ("C-c e s" . cape-symbol)
           ("C-c e a" . cape-abbrev)
           ("C-c e i" . cape-ispell)
           ("C-c e l" . cape-line)
           ("C-c e w" . cape-dict)
           ("C-c e \\" . cape-tex)
           ("C-c e _" . cape-tex)
           ("C-c e ^" . cape-tex)
           ("C-c e &" . cape-sgml)
           ("C-c e r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    (add-to-list 'completion-at-point-functions #'cape-sgml)
    (add-to-list 'completion-at-point-functions #'cape-rfc1345)
    (add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
    ;; (add-to-list 'completion-at-point-functions #'cape-dict)
    ;; (add-to-list 'completion-at-point-functions #'cape-symbol)
    ;; (add-to-list 'completion-at-point-functions #'cape-line)
    )

  (use-package kind-icon
    :ensure t
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  (use-package company-auctex :defer t :after (company) :config (company-auctex-init))
  (use-package company-reftex :defer t :after (company reftex)
    :config
    (add-to-list 'company-backends 'company-reftex-labels)
    (add-to-list 'company-backends 'company-reftex-citations))
#+end_src



* Templates

#+BEGIN_SRC emacs-lisp

  ;; Configure Tempel
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    ;; :custom
    ;; (tempel-trigger-prefix "<")
    ;; :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
    ;;        ("M-*" . tempel-insert))

    :init

    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))

    (add-hook 'prog-mode-hook 'tempel-setup-capf)
    (add-hook 'text-mode-hook 'tempel-setup-capf)

    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (use-package lsp-grammarly
    :disabled t
    :ensure t
    :hook (text-mode . (lambda ()
                         (require 'lsp-grammarly)
                         (lsp))))  ; or lsp-deferred

  (use-package lsp-bridge
    :disabled t
    :ensure '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
                         :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
                         :build (:not compile))
    :init
    ;; (setq lsp-bridge-tex-lsp-server "texlab-grammarly")
    (setq lsp-bridge-enable-hover-diagnostic t)
    (setq acm-enable-capf t)
    (setq acm-enable-doc t)
    (setq acm-enable-doc-markdown-render 'async)
    (setq acm-enable-icon t)
    (setq acm-enable-tabnine t)
    (setq acm-enable-quick-access t)
    (setq acm-enable-citre t)
    (setq acm-backend-search-file-words-candidate-min-length 3)
    (setq acm-backend-lsp-show-progress t)
    (setq acm-backend-yas-candidate-min-length 2)
    (setq acm-backend-elisp-candidate-min-length 2)
    (setq acm-backend-search-file-words-enable-fuzzy-match t)
    (setq acm-backend-search-file-words-enable-fuzzy-match-threshold 1)

    (setq acm-backend-lsp-match-mode "prefix")
    (setq acm-backend-lsp-frontend-filter-p t)
    ;; (require 'acm-backend-path)
    ;; (setq acm-enable-path t)

    (global-lsp-bridge-mode))
#+END_SRC
