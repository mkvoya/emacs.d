#+SETUPFILE: ~/.emacs.d/org-templates/level-0.org
#+TITLE: Emacs Main Configuration File
#+AUTHOR: Mingkai Dong
#+DATE: 2021-02-16T01:16:18+0800
#+EMAIL: mingkaidong@gmail.com


Styles from https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org

* Bootstrap

** Emacs Server
   #+BEGIN_SRC emacs-lisp
     (load "server") ; Load and start server if it's not running
     (unless (server-running-p) (server-start))
   #+END_SRC

** Packages

*** Built-in Package System
    | package | built-in |
    #+BEGIN_SRC emacs-lisp
      (require 'package)
      ;; (setq package-enable-at-startup nil)
      ;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
      ;; (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
      ;; (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
      (setq package-archives
            '(("melpa" . "https://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/melpa/")
              ("gnu" . "https://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/gnu/")
              ("nongnu" . "https://mirrors.sjtug.sjtu.edu.cn/emacs-elpa/nongnu/")))
      (package-initialize)
    #+END_SRC

*** use-package: A use-package declaration for simplifying your .emacs
    | use-package | https://github.com/jwiegley/use-package |
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'use-package)
        (package-refresh-contents)
        (package-install 'use-package t))
      (require 'use-package)
      ;; (setq-default
      ;;  use-package-always-defer t
      ;;  use-package-always-ensure t)
    #+END_SRC

*** Quelpa: Build and install your Emacs Lisp packages on-the-fly directly from source
    | quelpa             | https://github.com/quelpa/quelpa             |
    | quelpa-use-package | https://github.com/quelpa/quelpa-use-package |
    #+BEGIN_SRC emacs-lisp
      (unless (package-installed-p 'quelpa)
        (with-temp-buffer
          (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
          (eval-buffer)
          (quelpa-self-upgrade)))
      (setq quelpa-update-melpa-p nil)
      (require 'quelpa)
      (quelpa
       '(quelpa-use-package
         :fetcher git
         :url "https://github.com/quelpa/quelpa-use-package.git"))
      (require 'quelpa-use-package)
    #+END_SRC

** Misc
   #+BEGIN_SRC emacs-lisp
     ;;; Get shell env from user shell.
     (when (memq window-system '(mac ns x))
       (use-package exec-path-from-shell
         :ensure t
         :config
         (exec-path-from-shell-initialize)
         (if (and (fboundp 'native-comp-available-p)
                  (native-comp-available-p))
             (progn
               (message "Native comp is available")
               ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
               ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
               (add-to-list 'exec-path (concat invocation-directory "bin") t)
               (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
                                              (when (getenv "LIBRARY_PATH")
                                                ":")
                                              ;; This is where Homebrew puts gcc libraries.
                                              (car (file-expand-wildcards
                                                    (expand-file-name "/usr/local/opt/gcc/lib/gcc/10")))))
               (setenv "DYLD_LIBRARY_PATH" (concat (getenv "DYLD_LIBRARY_PATH")
                                                   (when (getenv "DYLD_LIBRARY_PATH") ":")
                                                   ;; This is where Homebrew puts gcc libraries.
                                                   (car (file-expand-wildcards
                                                         (expand-file-name "/usr/local/opt/gcc/lib/gcc/10")))))
               ;; Only set after LIBRARY_PATH can find gcc libraries.
               (setq comp-deferred-compilation t))
           (message "Native comp is *not* available"))))

   #+END_SRC

** Configs
   #+BEGIN_SRC emacs-lisp
     (setq
      ;; Backups
      backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      vc-make-backup-files t
      ;;(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
      ;;(setq delete-old-versiojns -1)
      ;;(setq version-control t)
      auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
      ;; History
      savehist-file "~/.emacs.d/savehist"
      history-length t
      history-delete-duplicates t
      savehist-save-minibuffer-history 1
      savehist-additional-variables '(kill-ring search-ring regex-search-ring))
     (savehist-mode 1)
     (setq-default
      ;; From: https://stackoverflow.com/questions/4657142/how-do-i-encourage-emacs-to-follow-the-compilation-buffer
      compilation-scroll-output t
      ;; (setq compilation-scroll-output 'first-error)
      ;; Prevent Extraneous Tabs
      indent-tabs-mode nil
      fill-column 80
      line-spacing 0.1) ; Line space
     (setq indent-tabs-mode nil)
     (setq enable-recursive-minibuffers t)
     (minibuffer-depth-indicate-mode 1)
     (visual-line-mode t)

     ;; lazy answer
     (fset 'yes-or-no-p 'y-or-n-p)

     ;; Clean up spaces
     ;;(bind-key "M-SPC" 'cycle-spacing)

     ;; Show column number
     (column-number-mode 1)

     ;; Sentence
     (setq sentence-end-double-space nil) ; Use only one space to end a sentence

   #+END_SRC



*** Scroll bar
   #+BEGIN_SRC emacs-lisp
     (global-yascroll-bar-mode 1); Yet Another scroll bar
   #+END_SRC


*** Window System
   #+BEGIN_SRC emacs-lisp

     ;; (when (memq window-system '(mac ns))
     ;;   (add-to-list 'default-frame-alist '(ns-appearance . light)) ;; {light, dark}
     ;;   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     ;;   (setq ns-use-proxy-icon nil)
     ;;   ;; (setq frame-title-format nil)
     ;;   )
     (when (eq system-type 'darwin) (ns-auto-titlebar-mode))
     (setq ns-use-proxy-icon nil)
     (when window-system (set-frame-size (selected-frame) 80 60))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (use-package bind-key :ensure t :defer t)
   #+END_SRC


*** diff-hl: Emacs package for highlighting uncommitted changes
    | diff-hl | https://github.com/dgutov/diff-hl |
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :defer 5
       :config
       (global-diff-hl-mode)
       (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
       (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp

     ;; Winner mode
     ;;(use-package winner :defer t)
     (if (fboundp 'winner-mode)
         (progn
           (winner-mode 1)
           (message "Winner-mode enabled"))
       (message "No Winner-Mode, Skip"))

     ;;minibuffer editing
     ;;(use-package miniedit
     ;;  :ensure t
     ;;  :defer t
     ;;  :commands minibuffer-edit
     ;;  :init (miniedit-install))
   #+END_SRC

*** Company: Modular in-buffer completion framework for Emacs
    | company-mode | https://github.com/company-mode/company-mode |
    #+BEGIN_SRC emacs-lisp
      ;; Autocomplete
      (use-package company
        :defer t
        :config
        ;; (add-hook 'prog-mode-hook 'company-mode)
        (setq company-dabbrev-downcase nil
              company-show-numbers t
              company-minimum-prefix-length 2)
        (setq company-tooltip-flip-when-above t)
        (global-company-mode 1)
        ;; (company-statistics-mode 1)
        ;; (require 'company-emoji)
        (setq company-backends
              '((company-files
                 company-keywords
                 company-capf
                 company-yasnippet
                 company-ispell
                 company-lsp)
                (company-abbrev company-dabbrev)))
        (with-eval-after-load 'company
          (define-key company-active-map (kbd "\C-n") #'company-select-next)
          (define-key company-active-map (kbd "\C-p") #'company-select-previous)
          (define-key company-active-map (kbd "M-n") nil)
          (define-key company-active-map (kbd "M-p") nil)
          (define-key (make-sparse-keymap) [down-mouse-1] 'ignore)
          (define-key (make-sparse-keymap) [down-mouse-3] 'ignore)
          (define-key (make-sparse-keymap) [mouse-1] 'company-complete-mouse)
          (define-key (make-sparse-keymap) [mouse-3] 'company-select-mouse)
          (define-key (make-sparse-keymap) [up-mouse-1] 'ignore)
          (define-key (make-sparse-keymap) [up-mouse-3] 'ignore)
          )
        (advice-add 'company-complete-common :before (lambda ()
                                                       (setq my-company-point (point))))
        (advice-add 'company-complete-common :after (lambda ()
                                                      (when (equal my-company-point (point)) (yas-expand))))
        )
    #+END_SRC


*** Evil
   #+BEGIN_SRC emacs-lisp

     (setq linum-format "%d ")
     ;; (global-linum-mode t)


     ;;(use-package spaceline-config
     ;;  :ensure t
     ;;  :config
     ;;  (spaceline-spacemacs-theme))

     ;;; Better evil
     (use-package evil
       :ensure t
       :after (smart-mode-line)
       :config
       (setq evil-want-fine-undo t)
       (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
       (global-undo-tree-mode)
       (evil-set-undo-system 'undo-tree)
       (use-package evil-numbers
         :config
         (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
         (define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt))
       ;; Evil rebind
       ;; :q should kill the current buffer rather than quitting emacs entirely
       (defun mkvoya/ex-quit ()
         "Evil ex quit."
         (interactive)
         (if (one-window-p "visible")
             (kill-this-buffer)
           (evil-window-delete)))
       (evil-ex-define-cmd "q" #'mkvoya/ex-quit)
       ;; (evil-ex-define-cmd "q" 'mkvoya/betterq)
       ;; Need to type out :quit to close emacs
       (evil-ex-define-cmd "quit" 'evil-quit)
       ;; (setq evil-emacs-state-cursor '("SkyBlue2" bar))
       ;; (setq evil-emacs-state-cursor '(hollow))
       (setq evil-emacs-state-cursor '(bar . 3))
       (evil-mode 1))

     ;;; Easy motion
     ;; Options includes:
     ;; - https://github.com/abo-abo/avy
     ;; - https://github.com/PythonNut/evil-easymotion
     ;; - https://github.com/hlissner/evil-snipe <= This is chosen by now.
     (use-package evil-easymotion
       :after (evil)
       :config
       (evilem-default-keybindings "SPC")
       ;; (evilem-define (kbd "SPC c") 'avy-goto-char)
       ;; (global-set-key (kbd "SPC") 'avy-goto-char)
       (define-key evil-normal-state-map (kbd "SPC") 'avy-goto-char))

     (use-package neotree
       :defer 5)

     ;; (use-package perspective
     ;;   :ensure t
     ;;   :defer t)
     ;; (persp-mode)

     (use-package flycheck
       :defer t
       :config
       ;; (global-flycheck-mode)
       (add-hook 'after-init-hook #'global-flycheck-mode)
       (setq flycheck-indication-mode 'left-fringe)
       (use-package flycheck-color-mode-line
         :after (flycheck)
         :defer t
         :config
         (eval-after-load "flycheck"
           '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))
       (use-package flycheck-status-emoji
         :after (flycheck)
         :defer t)
       ;; Flycheck + proselint
       (flycheck-define-checker proselint
         "A linter for prose."
         :command ("proselint" source-inplace)
         :error-patterns
         ((warning line-start (file-name) ":" line ":" column ": "
                   (id (one-or-more (not (any " "))))
                   (message) line-end))
         :modes (text-mode markdown-mode gfm-mode org-mode))
       (add-to-list 'flycheck-checkers 'proselint)
       )

     ;; optional: this is the evil state that evil-magit will use
     ;; (setq evil-magit-state 'normal)
     ;; optional: disable additional bindings for yanking text
     ;; (setq evil-magit-use-y-for-yank nil)
     (use-package evil-magit
       :after (evil magit))

     (setq confirm-kill-emacs 'y-or-n-p)

    #+END_SRC

*** Ctrl-f
    #+BEGIN_SRC emacs-lisp
      (use-package ctrlf
        :ensure t
        :defer 5
        :config
        (ctrlf-mode +1))
    #+END_SRC

*** smart-tab
    #+BEGIN_SRC emacs-lisp
      ;;; Smart Tab
      (use-package smart-tab
        :defer 5
        :config
        (smart-tabs-insinuate 'c 'javascript))
    #+END_SRC

*** Cheatsheet

    #+BEGIN_SRC emacs-lisp
     ;;; MK's cheatsheet
     (use-package cheatsheet
       :ensure t
       :config
       (cheatsheet-add :group 'Emacs
                       :key "C-x u"
                       :description "Emacs Undo.")
       (cheatsheet-add :group 'Emacs
                       :key "C-x e"
                       :description "Execute the e-lisp expression under the cursor.")
       (cheatsheet-add :group 'OrgMode
                       :key "C-c h"
                       :description "Open Home Org.")
       (cheatsheet-add :group 'OrgMode
                       :key "C-c a"
                       :description "Open Org Agenda.")
       (cheatsheet-add :group 'OrgMode
                       :key "C-c c"
                       :description "Capture.")
       )

    #+END_SRC


*** Smooth scrolling
    #+BEGIN_SRC emacs-lisp
      ;; scroll one line at a time (less "jumpy" than defaults)
      (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
      (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
      (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
      (setq scroll-step 1) ;; keyboard scroll one line at a time

      ;;(use-package etags-select
      ;;  :ensure t)

      ;;;; Mouse scrolling in terminal emacs
      (unless (display-graphic-p)
        ;; activate mouse-based scrolling
        ;; ensure mouse
        (xterm-mouse-mode t)
        (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
        (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

      ;; Do we still need this if we have good-scroll?
      ;; (use-package smooth-scrolling
      ;;   :config
      ;;   ;; the number 3 is buggy here when scrolling down.
      ;;   (setq smooth-scroll-margin 2)
      ;;   (smooth-scrolling-mode 1)
      ;;   )
      ;;; The effect of good-scroll is good, but slow.
      ;; (use-package good-scroll
      ;;   :ensure t
      ;;   :config
      ;;   (good-scroll-mode 1)
      ;;   )
      (use-package sublimity
        :defer t
        :config
        (use-package sublimity-scroll)
        ;; (use-package sublimity-map) ;; experimental
        (use-package sublimity-attractive)
        (sublimity-mode 1)
        )
    #+END_SRC


*** Smart-mode-line
    #+BEGIN_SRC emacs-lisp
      ;; Mode line format
      ;; Instead of powerline, airline, smart-mode-line
      (use-package smart-mode-line
        :ensure t
        ;; :defer 5
        :config
        (setq sml/no-confirm-load-theme t)
        (setq sml/theme 'respectful)
        ;; (setq sml/theme 'light)
        (setq sml/shorten-modes t)
        (setq sml/shorten-directory t)
        (sml/setup)
        )
    #+END_SRC

*** Undo-tree
    | undo-tree | built-in |
    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
        :defer 5
        :delight
        :config
        (progn
          (global-undo-tree-mode)
          (setq undo-tree-visualizer-timestamps t)
          (setq undo-tree-visualizer-diff t)))
    #+END_SRC
*** Yasnippet: A template system for Emacs
    | yasnippet | https://github.com/joaotavora/yasnippet |
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :defer 5
        :config
        (use-package yasnippet-snippets
          :defer 5
          :after (yasnippet))
        (yas-global-mode 1)
        )
    #+END_SRC

*** Beacon - A light that follows your cursor around so you don't lose it!
    | beacon | https://github.com/Malabarba/beacon |
    #+BEGIN_SRC emacs-lisp
      (use-package beacon
        :config
        (beacon-mode 1))
    #+END_SRC

*** Which-Key: Emacs package that displays available keybindings in popup
    | which-key | https://github.com/justbur/emacs-which-key |
    #+BEGIN_SRC emacs-lisp
      ;; which-key is a fork of guide-key
      (use-package which-key
        :defer 5
        :config
        (which-key-mode)
        (which-key-setup-minibuffer))
    #+END_SRC

*** Themes
    #+BEGIN_SRC emacs-lisp
      (use-package monokai-theme
        :defer t
        :config
        ;;  (load-theme 'monokai t)
        ;;  (setq monokai-background "#080C14")
        )
      (use-package grandshell-theme
        :defer t
        :config
        ;;  (load-theme 'grandshell t)
        )
      (use-package alect-themes
        :defer t
        :config
        ;;  (load-theme 'alect-black t)
        )
      ;; (use-package airline-themes
      ;;   :ensure t
      ;;   :config
      ;;   (load-theme 'airline-light t))
      ;; (load-theme 'manoj-dark)
      (load-theme 'doom-one-light t)
    #+END_SRC


*** delight: altering mode appearences on mode line
    | delight | https://elpa.gnu.org/packages/delight.html |
    #+BEGIN_SRC emacs-lisp
      ;;; (require 'diminish); => use delight
      (use-package delight
        :defer 5
        :config
        (delight '((abbrev-mode " Abv" "abbrev")
                   (smart-tab-mode " \\t" "smart-tab")
                   (eldoc-mode nil "eldoc")
                   (yas-mode)
                   (which-key-mode "" "which-key")
                   (Undo-Tree "UT" "undo-tree")
                   (overwrite-mode " Ov" t)))
        (delight 'rainbow-mode)
        (delight 'visual-line-mode "↩" t)
        (delight 'beacon-mode "" "beacon")
        (delight 'org-roam-mode "♞" "org-roam")
        (delight 'org-mode "♘" :major)
        (delight 'flycheck-mode "⍻" "flycheck")
        (delight 'yas-minor-mode "✎" "yasnippet")
        (delight 'emacs-lisp-mode "Elisp" :major))
      (add-to-list 'auto-mode-alist '("\\.eps\\'" . image-mode))
    #+END_SRC


*** LSP
    #+BEGIN_SRC emacs-lisp
      ;;;; LSP
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (use-package lsp-mode
        :defer 5
        :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
               (python-mode . lsp)
               ;; if you want which-key integration
               (lsp-mode . lsp-enable-which-key-integration))
        :commands lsp
        :config
        (setq lsp-keymap-prefix "s-l")
        )

      ;; optionally
      (use-package lsp-ui :commands lsp-ui-mode)
      ;; if you are helm user
      ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
      ;; if you are ivy user
      ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
      (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

      ;; optionally if you want to use debugger

      (use-package dap-mode)
      ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
    #+END_SRC

*** Async
    #+BEGIN_SRC emacs-lisp
     (use-package async
       :ensure t)
    #+END_SRC


** Calender
   #+BEGIN_SRC emacs-lisp
     ;; 分别是妇女节、植树节、劳动节、青年节、儿童节、教师节、国庆节、程序员节、双11
     (setq holiday-local-holidays `((holiday-fixed 3 8  "Women's Day")
                                    (holiday-fixed 3 12 "Arbor Day")
                                    ,@(cl-loop for i from 1 to 3
                                               collect `(holiday-fixed 5 ,i "International Workers' Day"))
                                    (holiday-fixed 5 4  "Chinese Youth Day")
                                    (holiday-fixed 6 1  "Children's Day")
                                    (holiday-fixed 9 10 "Teachers' Day")
                                    ,@(cl-loop for i from 1 to 7
                                               collect `(holiday-fixed 10 ,i "National Day"))
                                    (holiday-fixed 10 24 "Programmers' Day")
                                    (holiday-fixed 11 11 "Singles' Day")))
     ;; 分别是世界地球日、世界读书日、俄罗斯的那个程序员节
     (setq holiday-other-holidays '((holiday-fixed 4 22 "Earth Day")
                                    (holiday-fixed 4 23 "World Book Day")
                                    (holiday-sexp '(if (or (zerop (% year 400))
                                                           (and (% year 100) (zerop (% year 4))))
                                                       (list 9 12 year)
                                                     (list 9 13 year))
                                                  "World Programmers' Day")))
     (setq calendar-chinese-all-holidays-flag t)

     (use-package cal-china-x
       :ensure t
       :config
       (setq mark-holidays-in-calendar t)
       (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
       (setq cal-china-x-general-holidays '((holiday-lunar 1 15 "元宵节")))
       (setq calendar-holidays
             (append cal-china-x-important-holidays
                     cal-china-x-general-holidays))
       ;; other-holidays))
       )
   #+END_SRC
*** Calfw - A calendar framework for Emacs
    | Calfw | https://github.com/kiwanami/emacs-calfw |
    #+BEGIN_SRC emacs-lisp
      (use-package calfw
        :ensure t)
      (use-package calfw-org
        :ensure t
        :after (calfw org))
    #+END_SRC
*** whitespace
    | whitespace | Built-in | http://ergoemacs.org/emacs/whitespace-mode.html |
    #+BEGIN_SRC emacs-lisp
      ;;; Use whitespace (instead of column-marker, column-enforce-mode)
      (use-package whitespace
        :config
        (setq whitespace-style
              '(face trailing tabs newline tab-mark newline-mark))
        ;; '(face trailing tabs newline tab-mark newline-mark lines-tail)
        (setq whitespace-display-mappings
              '((newline-mark 10 [8617 10])
                (tab-mark 9 [8594 9] [92 9])))
        (set-face-background 'trailing-whitespace "#ffaf5f")
        (set-face-background 'whitespace-trailing "#ffaf5f")
        ;; (global-whitespace-mode t)
        (add-hook 'prog-mode-hook 'whitespace-mode)
        )
    #+END_SRC
** Languages
*** Programming mode
    #+BEGIN_SRC emacs-lisp
      (defun make-underscore-part-of-words () (modify-syntax-entry ?_ "w"))
      (add-hook 'prog-mode-hook #'make-underscore-part-of-words)
      (add-hook 'prog-mode-hook 'linum-mode)
      ;;(add-hook 'prog-mode-hook
      ;;         (lambda () (add-to-list 'write-file-functions
      ;;                                 'delete-trailing-whitespace)))
    #+END_SRC
*** PostScript/ps
    #+BEGIN_SRC emacs-lisp
      (add-hook 'ps-mode-hook 'doc-view-toggle-display)
    #+END_SRC
*** C
    #+BEGIN_SRC emacs-lisp
      (add-hook 'c-mode-hook
		(lambda() (setq tab-width 8
				c-default-style "linux"
				c-basic-offset 8
				c-indent-tabs-mode t)))
    #+END_SRC
*** C++
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
      ;; style I want to use in c++ mode
      (c-add-style "my-style"
                   '("stroustrup"
                     (c-basic-offset . 4)            ; indent by four spaces
                     (tab-width . 4)
                     (indent-tabs-mode . t)        ; use tabs
                     (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
                                         (brace-list-open . 0)
                                         (innamespace . [0])
                                         (statement-case-open . +)))))
      (defun my-c++-mode-hook ()
        (c-set-style "my-style"))        ; use my-style defined above
      (add-hook 'c++-mode-hook 'my-c++-mode-hook)
      (use-package modern-cpp-font-lock
        :defer t
        :config
        (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode))
    #+END_SRC

*** Markdown
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-mode
        :ensure t
        :mode (("README\\.md\\'" . gfm-mode)
               ("\\.md\\'" . markdown-mode)
               ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown")
        :config
        ;; (custom-set-variables '(markdown-command "/usr/local/bin/pandoc"))
        (setq markdown-command "/usr/local/bin/pandoc")

        (setq markdown-preview-stylesheets (list "https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"))
        ;;"http://thomasf.github.io/solarized-css/solarized-light.min.css"
        )
      (use-package flymd
        :after (markdown-mode))
    #+END_SRC

** LaTeX
   #+BEGIN_SRC emacs-lisp
     ;;; AucTex
     (use-package tex
       :ensure auctex
       :defer 5
       :config
       ;; make latexmk available via C-c C-c
       ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
       ;; (add-to-list 'TeX-command-list '("latexmk" "latexmk -pdf -escape-shell %s" TeX-run-TeX nil t :help "Run latexmk on file"))
       (add-to-list 'TeX-command-list '("Make" "make" TeX-run-command nil t))
       (add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "Make")))
       ;; (setq-default TeX-command-default "Make")
       ;; from https://gist.github.com/stefano-meschiari/9217695
       (setq TeX-auto-save t)
       (setq Tex-parse-self t)
       ;; Guess/Ask for the master file.
       (setq-default TeX-master nil)
       (add-hook 'LaTeX-mode-hook 'visual-line-mode)
       (add-hook 'LaTeX-mode-hook 'flyspell-mode)
       (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
       (setq reftex-plug-into-AUCTeX t)
       (setq TeX-PDF-mode t)

       ;; From https://emacs.stackexchange.com/questions/19472/how-to-let-auctex-open-pdf-with-pdf-tools
       ;; ;; Use pdf-tools to open PDF files
       ;; (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
       ;;       TeX-source-correlate-start-server t)
       ;; ;; Update PDF buffers after successful LaTeX runs
       ;; (add-hook 'TeX-after-compilation-finished-functions
       ;;           #'TeX-revert-document-buffer)

       (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
       (setq TeX-view-program-list
             '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -g %n %o %b")))
       ;; '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

       ;; (add-hook 'LaTeX-mode-hook
       ;;           (lambda ()
       ;;             (push
       ;;              '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
       ;;                :help "Run latexmk on file")
       ;;              TeX-command-list)))


       ;; From https://www.reddit.com/r/emacs/comments/4ew1s8/blurry_pdf_in_pdftools_and_docviewmode/
       ;; (use-package pdf-view
       ;;   :defer 5
       ;;   :config
       ;;   (setq pdf-view-midnight-colors `(,(face-attribute 'default :foreground) .
       ;;                                    ,(face-attribute 'default :background)))
       ;;   (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
       ;;   (add-hook 'pdf-view-mode-hook (lambda ()
       ;;                                   (pdf-view-midnight-minor-mode)))
       ;;   )
       (setq TeX-error-overview-open-after-TeX-run t)
       ;; (setq mkvoya/tex-auto-compile nil)
       ;; (defun mkvoya/tex-try-auto-compile ()
       ;;   (when (and (eq major-mode 'TeX-mode)
       ;;              (mkvoya/tex-auto-compile))
       ;;     (TeX-command-run))
       ;;   )
       ;; (add-hook 'after-save-hook #'mkvoya/tex-try-auto-compile)

       (use-package company-auctex
         :defer t
         :after (company)
         :config
         (company-auctex-init))
       (use-package reftex
         :defer 5
         :config
         (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
         (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
         )
       (use-package company-reftex
         :defer t
         :after (company reftex)
         :config
         (add-to-list 'company-backends 'company-reftex-labels)
         (add-to-list 'company-backends 'company-reftex-citations))
       (use-package auctex-latexmk)
       )
   #+END_SRC

*** Projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t

        :delight '(:eval (concat "⎈[" (projectile-project-name) "]"))
        :config
        (projectile-mode +1)
        ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        )
    #+END_SRC

*** Dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
        :ensure t
        :diminish dashboard-mode
        :config
        (setq dashboard-banner-logo-title "What a nice day!")
        ;;(setq dashboard-startup-banner "/path/to/image")
        (setq dashboard-items '((recents  . 10)
                                (bookmarks . 10)
                                (agenda . 5)
                                (projects . 5)
                                (registers . 5)))
        (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
        (dashboard-setup-startup-hook))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      ;; https://emacs.stackexchange.com/questions/45546/per-mode-value-for-fill-column
      (defun mkvoya/tex-mode-hook ()
        (setq fill-column 1024))
      (add-hook 'TeX-mode-hook #'mkvoya/tex-mode-hook)

      (use-package svg-tag-mode
        :after (quelpa quelpa-use-package)
        :quelpa (svg-tag-mode :repo "rougier/svg-tag-mode"
                              :fetcher github
                              :files ("svg-tag-mode.el")))
    #+END_SRC

*** LangTool
    #+BEGIN_SRC emacs-lisp
      (use-package langtool
        :defer 5
        :after (quelpa quelpa-use-package)
        :quelpa (langtool :repo "mhayashi1120/Emacs-langtool"
                          :fetcher github
                          :files ("langtool.el"))
        :init
        (setq langtool-language-tool-server-jar "/usr/local/Cellar/languagetool/5.1.3_2/libexec/languagetool-server.jar")
        ;; (setq langtool-bin "/usr/local/bin/langtool")
        (setq langtool-server-user-arguments '("-p" "8099"))

        ;; (defun langtool-autoshow-detail-popup (overlays)
        ;;   (when (require 'popup nil t)
        ;;     ;; Do not interrupt current popup
        ;;     (unless (or popup-instances
        ;;                 ;; suppress popup after type `C-g` .
        ;;                 (memq last-command '(keyboard-quit)))
        ;;       (let ((msg (langtool-details-error-message overlays)))
        ;;         (popup-tip msg)))))
        ;; (setq langtool-autoshow-message-function
        ;;       'langtool-autoshow-detail-popup)
        )
    #+END_SRC


*** Maple Explorer
    #+BEGIN_SRC emacs-lisp
      (use-package maple-explorer
        :after (quelpa quelpa-use-package)
        :quelpa (maple-explorer
                 :fetcher github
                 :repo "honmaple/emacs-maple-explorer")
        :commands (maple-explorer-file maple-explorer-buffer maple-explorer-imenu maple-explorer-recentf)
        :config
        (setq maple-explorer-file-display-alist '((side . left) (slot . -1))))
    #+END_SRC

*** Peep-dired
    #+BEGIN_SRC emacs-lisp
      ;;preview files in dired
      (use-package peep-dired
        :ensure t
        :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
        :bind (:map dired-mode-map
                    ("P" . peep-dired)))

      ;; Prevent polluting the system slipboard
      ;; (setq select-enable-clipboard nil)
      ;; Dired-sidebar is not good to use.
      ;; (use-package dired-sidebar
      ;;   :ensure t
      ;;   :commands (dired-sidebar-toggle-sidebar))
      ;; (use-package dired-subtree
      ;;   :config
      ;;   (bind-keys :map dired-mode-map
      ;;              ("<S-return>" . dired-subtree-toggle)))
    #+END_SRC

*** Tramp
    #+BEGIN_SRC emacs-lisp
      (use-package tramp
        :defer 5
        :config
        ;; (setq tramp-debug-buffer t)
        (setq tramp-verbose 10))

      (setq alert-default-style 'libnotify)
      (setq org-alert-headline-regexp "\\(SCHEDULED:.+\\|DEADLINE:.+\\)")

      (modify-syntax-entry ?_ "w")

       ;;; ========== Charset and Unicode and Emoji =============
      ;; UTF-8
      (prefer-coding-system 'utf-8)
      (when (display-graphic-p)
        (setq x-select-request-type '(UTF8_STRING COMPUND_TEXT TEXT STRING)))

      ;; Unicode
      (defmacro my/insert-unicode (unicode-name)
        `(lambda () (interactive)
           (insert-char (cdr (assoc-string, unicode-name (ucs-names))))))
      (bind-key "C-x 8 s" (my/insert-unicode "ZERO WIDTH SPACE"))
      (bind-key "C-x 8 S" (my/insert-unicode "SNOWMAN"))
      (set-language-environment "UTF-8")
      (set-default-coding-systems 'utf-8)

      ;; (use-package emojify
      ;;   :hook (after-init . global-emojify-mode))

      (use-package unicode-fonts
        :ensure t
        :config
        (setq unicode-fonts-skip-font-groups
              '(chinese-simplified chinese-traditional
                                   chinese-hanja chinese-kanji chinese-nom
                                   multicolor decorative low-quality-glyphs))
        ;; This breaks the Sarasa font
        ;; (unicode-fonts-setup)
        )

      (use-package config-appearances
        :after (unicode-fonts)
        :load-path "~/.emacs.d/mkvoya"
        :ensure nil) ; local package does not need ensure

      (use-package orderless
        :ensure t
        :init (icomplete-mode) ; optional but recommended!
        :custom (completion-styles '(orderless)))

      ;;; =========== Some builtin modes =============
      ;;; https://emacs-china.org/t/emacs-builtin-mode/11937

      (use-package paren
        :ensure nil
        :hook (after-init . show-paren-mode)
        :config
        (setq show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t))
      (use-package so-long
        :ensure nil
        :config (global-so-long-mode 1))
      (use-package simple
        :ensure nil
        :hook (after-init . (lambda ()
                              (line-number-mode)
                              (column-number-mode)
                              (size-indication-mode))))

              ;;; ========== End of Some builtin modes ===========
      ;; Make gc pauses faster by decreasing the threshold.
      (setq gc-cons-threshold (* 2 1000 1000))
    #+END_SRC

** Completion
*** Selectrum
    | Selectrum | https://github.com/raxod502/selectrum |

    Alternatives (Check the selectrum repo README)
    | Ido       |   |
    | Helm      |   |
    | Ivy       |   |
    | Icomplete |   |
    | Icicles   |   |
    | Snails    |   |
    | Snallet   |   |
    | Raven     |   |
    | Swiper    |   |

    #+BEGIN_SRC emacs-lisp
       ;;; Disable Helm and use ivy.
       ;;; Disable ivy, swiper, counsel, use selectrum and consult (and ctrlf?)
      (use-package selectrum
        :ensure t
        :config
        (selectrum-mode +1)
        )
      (use-package selectrum-prescient
        :ensure t
        :after (selectrum)
        :config
        ;; to make sorting and filtering more intelligent
        (selectrum-prescient-mode +1)
        ;; to save your command history on disk, so the sorting gets more
        ;; intelligent over time
        (prescient-persist-mode +1)
        )
    #+END_SRC

*** Very Large File
    #+BEGIN_SRC emacs-lisp
      ;;; View Large Files
      (use-package vlf
        :defer t)
    #+END_SRC


*** consult.el - Consulting completing-read
    | consult | https://github.com/minad/consult |

   #+BEGIN_SRC emacs-lisp
     ;; Example configuration for Consult
     (use-package consult
       ;; Replace bindings. Lazily loaded due by `use-package'.
       :bind (("C-x M-:" . consult-complex-command)
              ;; ("C-c h" . consult-history)
              ("C-c m" . consult-mode-command)
              ("C-x b" . consult-buffer)
              ("C-x 4 b" . consult-buffer-other-window)
              ("C-x 5 b" . consult-buffer-other-frame)
              ("C-x r x" . consult-register)
              ("C-x r b" . consult-bookmark)
              ("M-g g" . consult-goto-line)
              ("M-g M-g" . consult-goto-line)
              ("M-g o" . consult-outline)       ;; "M-s o" is a good alternative.
              ("M-g l" . consult-line)          ;; "M-s l" is a good alternative.
              ("M-g m" . consult-mark)          ;; I recommend to bind Consult navigation
              ("M-g k" . consult-global-mark)   ;; commands under the "M-g" prefix.
              ("M-g r" . consult-git-grep)      ;; or consult-grep, consult-ripgrep
              ("M-g f" . consult-find)          ;; or consult-fdfind, consult-locate
              ("M-g i" . consult-project-imenu) ;; or consult-imenu
              ("M-g e" . consult-error)
              ("M-s m" . consult-multi-occur)
              ("M-y" . consult-yank-pop)
              ("<help> a" . consult-apropos))
       ;; The :init configuration is always executed (Not lazy!)
       :init
       ;; Replace `multi-occur' with `consult-multi-occur', which is a drop-in replacement.
       (fset 'multi-occur #'consult-multi-occur)
       ;; Configure other variables and modes in the :config section, after lazily loading the package
       :config
       ;; Optionally configure a function which returns the project root directory
       (autoload 'projectile-project-root "projectile")
       (setq consult-project-root-function #'projectile-project-root)
       ;; Optionally configure narrowing key.
       ;; Both < and C-+ work reasonably well.
       (setq consult-narrow-key "<") ;; (kbd "C-+")
       ;; Optionally make narrowing help available in the minibuffer.
       ;; Probably not needed if you are using which-key.
       ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

       ;; Optional configure a view library to be used by `consult-buffer'.
       ;; The view library must provide two functions, one to open the view by name,
       ;; and one function which must return a list of views as strings.
       ;; Example: https://github.com/minad/bookmark-view/
       ;; (setq consult-view-open-function #'bookmark-jump
       ;;       consult-view-list-function #'bookmark-view-names)

       ;; Optionally enable previews. Note that individual previews can be disabled
       ;; via customization variables.
       ;; (consult-preview-mode))
       )

     ;; Enable Consult-Selectrum integration.
     ;; This package should be installed if Selectrum is used.
     (use-package consult-selectrum
       :after selectrum
       :demand t)

     ;; Optionally add the `consult-flycheck' command.
     (use-package consult-flycheck
       :bind (:map flycheck-command-map
                   ("!" . consult-flycheck)))

     ;;; ========= End of Consult ===========
     #+END_SRC


*** 无错
    #+BEGIN_SRC emacs-lisp
      (use-package wucuo
        :defer 5
        :config
        (add-hook 'prog-mode-hook #'wucuo-start)
        (add-hook 'text-mode-hook #'wucuo-start)
        (setq ispell-program-name "aspell")
        ;; You could add extra option "--camel-case" for since Aspell 0.60.8
        ;; @see https://github.com/redguardtoo/emacs.d/issues/796
        (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together" "--run-together-limit=16" "--camel-case")))
    #+END_SRC

*** marginalia.el -- Marginalia in the minibuffer
    | marginalia | https://github.com/minad/marginalia |
    #+BEGIN_SRC emacs-lisp
      ;; Enable richer annotations using the Marginalia package
      (use-package marginalia
        :defer 5
        :ensure t
        ;; The :init configuration is always executed (Not lazy!)
        :init
        ;; Must be in the :init section of use-package such that the mode gets
        ;; enabled right away. Note that this forces loading the package.
        (marginalia-mode)
        ;; Prefer richer, more heavy, annotations over the lighter default variant.
        ;; E.g. M-x will show the documentation string additional to the keybinding.
        ;; By default only the keybinding is shown as annotation.
        ;; Note that there is the command `marginalia-cycle-annotators` to
        ;; switch between the annotators.
        (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light))
        )
    #+END_SRC
*** Embark: Emacs Mini-Buffer Actions Rooted in Keymaps
    | Embark | https://github.com/oantolin/embark/ |
    #+BEGIN_SRC emacs-lisp
      (use-package embark
        :after selectrum
        :bind (:map minibuffer-local-map
                    ("C-o" . embark-act)
                    ("C-S-o" . embark-act-noexit)
                    :map embark-file-map
                    ("j" . dired-jump)))
    #+END_SRC

** Mail Client
   #+BEGIN_SRC emacs-lisp
     ;; Mails
     (autoload 'notmuch "notmuch" "notmuch mail" t)
     ;; (use-package notmuch)

     (use-package notmuch-unread
       :after (quelpa)
       :quelpa (notmuch-unread :repo "mkvoya/notmuch-unread"
                               :fetcher github
                               :files ("notmuch-unread.el"))
       :config
       (setq notmuch-unread-update-interval 300))
   #+END_SRC


** Org-mode
*** Org
   #+BEGIN_SRC emacs-lisp

     ;; Enable Org mode
     (use-package org
       :defer t
       :config
       ;; Shortcuts
       (global-set-key (kbd "C-c a") 'org-agenda)
       (global-set-key (kbd "C-c c") 'org-capture)

       ;; Auto add DONE TIME, from https://orgmode.org/guide/Progress-Logging.html
       (setq org-log-done 'time)

       ;; Org mode TODO states
       (setq org-todo-keywords
             '((sequence
                "TODO(t)"
                "HAND(h)"
                "WAIT(w)"
                "LONG-TERM(l)"
                "DELEGATE(e)"
                "|"
                "DONE(d!)"
                "CANCELED(c@)"
                )))
       ;; Keyword colors
       (setf org-todo-keyword-faces
             '(
               ;; Many styles from https://github.com/GTrunSec/my-profile/blob/master/dotfiles/doom-emacs/config.org
               ("TODO" . (:foreground "#ff39a3" :weight bold))
               ("HAND"  . "orangered")
               ;; ("WAIT" . (:foreground "orange" :weight bold))
               ("WAIT" . "pink")
               ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
               ("DONE" . "#008080")
               ("DELEGATE"  . "DeepSkyBlue")
               ;; ("FIXME" . "IndianRed")
               ;; ("☟ NEXT" . (:foreground "DeepSkyBlue"
               ;;                         ;; :background "#7A586A"
               ;;                         :weight bold))
               ;; ("☕ BREAK" . "gray")
               ;; ("❤ LOVE" . (:foreground "VioletRed4"
               ;;                       ;; :background "#7A586A"
               ;;                       :weight bold))
               ))

       ;; from https://github.com/psamim/dotfiles/blob/master/doom/config.el#L73
       ;; (setq org-ellipsis "…")
       ;; ➡, ⚡, ▼, ↴, , ∞, ⬎, ⤷, ⤵
       ;; (setq org-ellipsis "↴▾▽▼↩↘↸")
       (setq org-ellipsis "▾")

       ;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
       (defun org-force-open-current-window ()
         "Open at current window."
         (interactive)
         (let ((org-link-frame-setup (quote
                                      ((vm . vm-visit-folder)
                                       (vm-imap . vm-visit-imap-folder)
                                       (gnus . gnus)
                                       (file . find-file)
                                       (wl . wl)))
                                     ))
           (org-open-at-point)))

       ;; Depending on universal argument try opening link
       (defun org-open-maybe (&optional arg)
         "Open maybe ARG."
         (interactive "P")
         (if arg (org-open-at-point)
           (org-force-open-current-window)))
       ;; Redefine file opening without clobbering universal argument
       (define-key org-mode-map "\C-c\C-o" 'org-open-maybe)
       ;; org inline image width from https://www.reddit.com/r/emacs/comments/55zk2d/adjust_the_size_of_pictures_to_be_shown_inside/
       (setq org-image-actual-width (/ (display-pixel-width) 3))

       (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

       (org-babel-do-load-languages
        'org-babel-load-languages
        '((dot . t)
          (C . t)))

       ;; https://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images
       ;; Always redisplay inline images after executing SRC block
       (eval-after-load 'org
         (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))

       (add-hook 'org-mode-hook
                 (lambda () (add-to-list 'write-file-functions
                                         'delete-trailing-whitespace)))

       )

     ;;; Org Style
     ;; from https://www.lijigang.com/blog/2018/08/08/神器-org-mode/#org4288876
     ;; ;; 打开 org-indent mode
     ;; (setq org-startup-indented t)
     (use-package org-superstar
       :after (org)
       :config
       (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
       ;; 设置 bullet list
       ;; (with-eval-after-load 'org-superstar
       ;;   (set-face-attribute 'org-superstar-item nil :height 1.2)
       ;;   (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
       ;;   (set-face-attribute 'org-superstar-leading nil :height 1.3))
       ;; Set different bullets, with one getting a terminal fallback.
       ;; (setq org-superstar-headline-bullets-list
       ;;       '("◉" "◈" "○" "▷"))
       (setq org-superstar-headline-bullets-list
             '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
       ;; ⎋〄
       ;; Stop cycling bullets to emphasize hierarchy of headlines.
       (setq org-superstar-cycle-headline-bullets nil)
       ;; Hide away leading stars on terminal.
       (setq org-superstar-leading-fallback ?\s)
       (setq org-indent-mode-turns-on-hiding-stars nil)
       (setq org-hide-leading-stars t)
       (setq org-superstar-item-bullet-alist
             '((42 . 8226) ; *
               (43 . 10149) ; +
               (45 . 8211))) ; -
       )


     ;; agenda 里面时间块彩色显示
     ;; From: https://emacs-china.org/t/org-agenda/8679/3
     (defun ljg/org-agenda-time-grid-spacing ()
       "Set different line spacing w.r.t. time duration."
       (save-excursion
         (let* ((background (alist-get 'background-mode (frame-parameters)))
                (background-dark-p (string= background "dark"))
                (colors (list "#1ABC9C" "#2ECC71" "#3498DB" "#9966ff"))
                pos
                duration)
           (nconc colors colors)
           (goto-char (point-min))
           (while (setq pos (next-single-property-change (point) 'duration))
             (goto-char pos)
             (when (and (not (equal pos (point-at-eol)))
                        (setq duration (org-get-at-bol 'duration)))
               (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                     (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
                 (overlay-put ov 'face `(:background ,(car colors)
                                                     :foreground
                                                     ,(if background-dark-p "black" "white")))
                 (setq colors (cdr colors))
                 (overlay-put ov 'line-height line-height)
                 (overlay-put ov 'line-spacing (1- line-height))))))))
     (add-hook 'org-agenda-finalize-hook #'ljg/org-agenda-time-grid-spacing)


     ;;; Paste Image From https://emacs-china.org/t/topic/6601/4
     (defun org-insert-image ()
       "Insert a image from clipboard."
       (interactive)
       (let* ((path (concat default-directory
                            (buffer-name)
                            ".assets/"))
              (image-file (concat
                           path
                           (buffer-name)
                           (format-time-string "_%Y%m%d_%H%M%S.png"))))
         (if (not (file-exists-p path))
             (mkdir path))
         (do-applescript (concat
                          "set the_path to \"" image-file "\" \n"
                          "set png_data to the clipboard as «class PNGf» \n"
                          "set the_file to open for access (POSIX file the_path as string) with write permission \n"
                          "write png_data to the_file \n"
                          "close access the_file"))
         ;; (shell-command (concat "pngpaste " image-file))
         (org-insert-link nil
                          (concat "file:" image-file)
                          "")
         (message image-file))
       (org-display-inline-images)
       )

     ;;; from https://christiantietze.de/posts/2019/12/emacs-notifications/
     (use-package appt
       :defer 10
       :config

       (setq
        appt-time-msg-list nil ;; clear existing appt list
        appt-display-interval '5 ;; warn every 5 minutes from t - appt-message-warning-time
        appt-message-warning-time '15 ;; send first warning 15 minutes before appointment
        appt-display-mode-line nil ;; don't show in the modeline
        appt-display-format 'window) ;; pass warnings to the designated window function
       (setq appt-disp-window-function (function ct/appt-display-native))

       (appt-activate 1) ;; activate appointment notification
                                             ; (display-time) ;; Clock in modeline

       (setq exec-path (append '("~/.emacs.d/3rd-parties/alerter/bin") exec-path))
       (defvar alerter-command (executable-find "alerter") "The path to alerter.")

       (defun ct/send-notification (title msg)
         "Send notification (TITLE MSG)."
         (let ((notifier-path (executable-find "alerter")))
           (start-process
            "Appointment Alert"
            "*Appointment Alert*" ; use `nil` to not capture output; this captures output in background
            notifier-path
            "-message" msg
            "-title" title
            "-sender" "org.gnu.Emacs"
            "-activate" "org.gnu.Emacs")))
       (defun ct/appt-display-native (min-to-app new-time msg)
         "Appt display native (MIN-TO-APP NEW-TIME MSG)."
         (ct/send-notification
          (format "Appointment in %s minutes" min-to-app) ; Title
          (format "%s" msg))) ; Message/detail text

       ;; Agenda-to-appointent hooks
       (org-agenda-to-appt) ;; generate the appt list from org agenda files on emacs launch
       (run-at-time "24:01" 3600 'org-agenda-to-appt) ;; update appt list hourly
       (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt) ;; update appt list on agenda view
       )

     (use-package ox-html
       :config
       ;; Org export code style
       (setq org-html-htmlize-output-type 'css)
       (setq-default org-html-doctype "html5")
       (setq-default org-html-html5-fancy t)
       )

     (add-hook (quote org-mode-hook)
               (lambda ()
                 (org-shifttab 5)))

     ;;; According to https://orgmode.org/manual/Hard-indentation.html#Hard-indentation
     ;;; But I don't need the odd levels only
     (setq org-adapt-indentation t
           org-hide-leading-stars t)
     ;;org-odd-levels-only t)

     ;; ;; Two more extensions could be relavant.
     ;; ;; org-super-links
     ;; ;; org-wild-notifier.el
     ;; (use-package org-wild-notifier
     ;;   :ensure t
     ;;   :config
     ;;   (org-wild-notifier-mode t)
     ;;   ;;; Overwrite
     ;;   (defun org-wild-notifier--notify (event-msg)
     ;;     "Notify about an event using `alert' library.
     ;; EVENT-MSG is a string representation of the event."
     ;;     ;;(message "Here is the events %S" event-msg)
     ;;     ;;(message "%d" "ddd")
     ;;     ;;(if event-msg
     ;;      ;;   (progn
     ;;           (ct/send-notification org-wild-notifier-notification-title event-msg)
     ;;           ;; (alert event-msg :title org-wild-notifier-notification-title :severity org-wild-notifier--alert-severity))
     ;;           ;;)
     ;;           (message "No new events"))
     ;;   ;;)
     ;;   )

     (use-package org-ref
       :disabled
       :ensure nil
       :defer t
       :config
       (let* ((note-dir "~/Dropbox/Dreams/Research/Papers/Notes/")
              (note-file (concat note-dir "Notes.org"))
              (bib-file "~/Dropbox/Dreams/Research/Papers/Main.bib")
              (pdf-dir "~/Dropbox/Dreams/Research/Papers"))
         (setq reftex-default-bibliography bib-file)
         ))

   #+END_SRC
*** Calender sync
    #+BEGIN_SRC emacs-lisp
      ;;; https://www.pengmeiyu.com/blog/sync-org-mode-agenda-to-calendar-apps/
      (use-package ox-icalendar
        :config
        (setq org-icalendar-alarm-time 5)
        (setq org-icalendar-combined-agenda-file "~/Dropbox/Dreams/Org/org.ics"
              org-icalendar-include-todo 'all
              org-icalendar-store-UID t
              org-icalendar-timezone ""
              org-icalendar-use-deadline
              '(event-if-not-todo event-if-todo event-if-todo-not-done todo-due)
              org-icalendar-use-scheduled
              '(event-if-not-todo event-if-todo event-if-todo-not-done todo-start))
        )
      (use-package org-caldav
        :ensure t
        :after (async)
        :config
        (setq org-caldav-url "https://dong.mk/radicale/mkvoya/")
        (setq org-caldav-calendar-id "f846603c-c54c-c73f-f009-e7331ef16216")
        (setq org-caldav-inbox "~/Dropbox/Dreams/Org/Caldav.inbox.org")
        (setq org-caldav-files '("~/Dropbox/Dreams/Org/IPADS.sched.org"
                                 "~/Dropbox/Dreams/Org/Main.org"
                                 "~/Dropbox/Dreams/Org/Inbox.org"
                                 ))
        ;; (setq org-icalendar-timezone "America/Los_Angeles")
        (setq org-icalendar-timezone "Asia/Shanghai")
        )
    #+END_SRC
*** Org publish
    #+BEGIN_SRC emacs-lisp
      ;;; Org Publish
      (use-package ox-publish
        :config
        (setq org-publish-project-alist
              '(
                ("org-notes"
                 :base-directory "~/Dropbox/Dreams/Org/Public"
                 :base-extension "org"
                 :publishing-directory "/Volumes/ramfs/public_html/"
                 :recursive t
                 :publishing-function org-html-publish-to-html
                 :headline-levels 4             ; Just the default for this project.
                 :auto-preamble t
                 )
                ("org-static"
                 :base-directory "~/Dropbox/Dreams/Org/Public"
                 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
                 :publishing-directory "/Volumes/ramfs/public_html/"
                 :recursive t
                 :publishing-function org-publish-attachment
                 )
                ("org" :components ("org-notes" "org-static"))
                )))
    #+END_SRC
*** Capture
    #+BEGIN_SRC emacs-lisp
      ;;; Captures
      (use-package org-capture
        :config
        (setq org-capture-templates nil)
        (add-to-list 'org-capture-templates
                     '("j" "Journals" entry
                       (file+datetree "~/Dropbox/Dreams/Org/Journals/Index.org" "Journals")
                       "* %U - %^{heading}\n  %?"))
        ;; (setq org-default-notes-file "~/Dropbox/Dreams/Org/Inbox.org")
        (add-to-list 'org-capture-templates
                     '("t" "Tasks" entry
                       (file+headline "~/Dropbox/Dreams/Org/Inbox.org" "Tasks")
                       "* TODO %?\nADDED: %u\n%a"))
        (add-to-list 'org-capture-templates
                     '("b" "Bookmarks" entry
                       (file+datetree "~/Dropbox/Dreams/Org/Collections/Bookmarks.org" "Bookmarks")
                       "* %U - %^{title}\nADDED: %U\n%?"))
        (add-to-list 'org-capture-templates
                     '("p" "Plans" entry
                       (file+olp+datetree "~/Dropbox/Dreams/Org/Plans.org" "Plans")
                       "* TODO %T %^{Heading}\n  %^{EFFORT}p %?" :time-prompt t :tree-type week :empty-lines 1))
        )
    #+END_SRC
*** OrgRoam
    #+BEGIN_SRC emacs-lisp
      (use-package org-roam
        :ensure t
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory "~/Dropbox/Dreams/Org/")
        :bind (:map org-roam-mode-map
                    (("C-c n l" . org-roam)
                     ("C-c n f" . org-roam-find-file)
                     ("C-c n g" . org-roam-graph))
                    :map org-mode-map
                    (("C-c n i" . org-roam-insert))
                    (("C-c n I" . org-roam-insert-immediate))))
    #+END_SRC
*** OrgRoam-Server
    #+BEGIN_SRC emacs-lisp
      (use-package org-roam-server
        :ensure t
        :config
        (setq org-roam-server-host "127.0.0.1"
              org-roam-server-port 8001
              org-roam-server-authenticate nil
              org-roam-server-export-inline-images t
              org-roam-server-serve-files nil
              org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
              org-roam-server-network-poll t
              org-roam-server-network-arrows nil
              org-roam-server-network-label-truncate t
              org-roam-server-network-label-truncate-length 60
              org-roam-server-network-label-wrap-length 20))
      ;; Since the org module lazy loads org-protocol (waits until an org URL is
      ;; detected), we can safely chain `org-roam-protocol' to it.
      (use-package org-roam-protocol
        :after org-protocol)
    #+END_SRC
*** OrgBrain
    #+BEGIN_SRC emacs-lisp
      ;; ;; Allows you to edit entries directly from org-brain-visualize
      ;; (use-package polymode
      ;;   :config
      ;;   (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode))
      ;;
      (use-package org-brain :ensure t
        :disabled
        :init
        (setq org-brain-path "~/Dropbox/Dreams/Org/Brain")
        ;; For Evil users
        (with-eval-after-load 'evil
          (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
        :config
        (bind-key "C-c b" 'org-brain-prefix-map org-mode-map)
        (setq org-id-track-globally t)
        (setq org-id-locations-file "~/Dropbox/Dreams/Org/Brain/org-id-locations")
        (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
        (push '("b" "Brain" plain (function org-brain-goto-end)
                "* %i%?" :empty-lines 1)
              org-capture-templates)
        (setq org-brain-visualize-default-choices 'all)
        (setq org-brain-title-max-length 12)
        (setq org-brain-include-file-entries nil
              org-brain-file-entries-use-title nil))
    #+END_SRC
*** Exporter
    #+BEGIN_SRC emacs-lisp
      (use-package ox-slimhtml
	:ensure t
        :disabled
	:config
	(org-export-define-derived-backend 'custom-html-exporter
	    'slimhtml                             ;; org's default exporter is 'html
	  :menu-entry
	  '(?s "Export to slimhtml"
	       ((?o "As slimhtml file and open"
		    (lambda (a s v b)
		      (if a (ox-slimhtml-export-to-html t s v b)
			(org-open-file (ox-slimhtml-export-to-html nil s v b))))))))
	)
    #+END_SRC
** 目前禁用的功能
*** 输入法
    | pyim | https://github.com/tumashu/pyim |
*** Zettel
    | deft      |   |
    | zetteldef |   |
    | notdeft   |   |

    #+BEGIN_SRC emacs-lisp
      ;; try notdeft?
      (use-package deft
        :disabled
        :ensure t
        :defer t
        :custom
        (deft-extensions '("org" "md" "txt"))
        (deft-directory "~/Dropbox/Dreams/Zettels")
        (deft-use-filename-as-title t))
      (use-package zetteldeft
        :disabled
        :ensure t
        :defer t
        :after deft
        :config
        (zetteldeft-set-classic-keybindings))
    #+END_SRC

*** Custom key-bindings
    #+BEGIN_SRC emacs-lisp
      ;; from https://stackoverflow.com/questions/1250846/wrong-type-argument-commandp-error-when-binding-a-lambda-to-a-key
      (global-set-key (kbd "C-c h") (lambda () (interactive) (find-file "~/Dropbox/Dreams/Org/Main.org")))
      ;; Open ibuffer upon "C-c i"
      (global-set-key (kbd "C-c i") 'ibuffer)
      (global-set-key (kbd "C-c e") (lambda () (interactive) (find-file "~/.emacs.d/emacs-config.org")))
      (global-unset-key [mouse-3])
      (global-set-key [down-mouse-3]
                      `(menu-item ,(purecopy "Menu Bar") ignore
                                  :filter (lambda (_)
                                            (if (zerop (or (frame-parameter nil 'menu-bar-lines) 0))
                                                (mouse-menu-bar-map)
                                              (mouse-menu-major-mode-map)))))
    #+END_SRC
*** Custom functions

    #+BEGIN_SRC emacs-lisp
      ;; From https://emacs.stackexchange.com/questions/47627/identify-buffer-by-part-of-its-name
      (defun switch-to-existing-buffer-other-window (part)
        "Switch to buffer with PART in its name."
        (interactive
         (list (read-buffer-to-switch "Switch to buffer in other window: ")))
        (let ((candidates
               (cl-remove
                nil
                (mapcar (lambda (buf)
                          (let ((pos (string-match part (buffer-name buf))))
                            (when pos
                              (cons pos buf))))
                        (buffer-list)))))
          (unless candidates
            (user-error "There is no buffers with %S in its name." part))
          (setq candidates (cl-sort candidates #'< :key 'car))
          (switch-to-buffer-other-window (cdr (car candidates)))))

      (defun mkvoya/open-orgroam-panel()
        "Open the Org-roam client at [http://127.0.0.1:8001]."
        (interactive)
        (progn
          ;; Ensure the server is running.
          (unless (org-roam-server-mode)
            (org-roam-server-mode 1))
          ;; Ensure the session is running.
          (xwidget-webkit-browse-url "http://127.0.0.1:8001" nil)
          ;; Switch to the buffer
          (switch-to-existing-buffer-other-window "Roam Server")
          ))
    #+END_SRC
