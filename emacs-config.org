#+TITLE: Emacs Main Configuration File
#+AUTHOR: Mingkai Dong
#+DATE: 2021-02-16T01:16:18+0800
#+EMAIL: mingkaidong@gmail.com

Styles from https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
Also from https://github.com/sachac/.emacs.d

* Env

#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-jobs-number 7) ; Compile at most 7 libs in parallel
  (setq .org "~/.emacs.d/emacs-config.org")
  (setq .el (concat (file-name-sans-extension .org) ".el"))
  (defun mkvoya/sync-emacs-config()
    "Synchronize config from org to el and compile to elc."
    (interactive)
    ;; Avoid running hooks when tangling. From https://delta.re/emacs-config-org/
    (let ((prog-mode-hook nil))
      (require 'ob-tangle)
      ;; Tangle the file. It's fast.
      (org-babel-tangle-file .org .el "emacs-lisp")
      (message "[CONFIG] Config is synchronized.")
      ;; Async compile the config.
      (async-start
       ;; What to do in the child process
       ;; the backquote and the set are necessary to capture vars
       `(lambda () ; ` is necessary to capture vars.
          (set 'el-file ,.el) ; Get the captured var.
          (byte-compile-file el-file) ; Compile the el file.
          el-file) ; Return the file name.
       ;; What to do when it finishes
       (lambda (res) (message "[CONFIG] Config %s is async-compiled." res))
       )))

  ;; Sync config when the config file is saved.
  (add-hook 'after-save-hook
            (lambda ()
              (if (equal (buffer-file-name) (expand-file-name .org))
                  (mkvoya/sync-emacs-config))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'fringe nil :background nil) ; Visually hide left-right margins
#+END_SRC

* Bootstrap

** Custom Files

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/customs.el")
  (load custom-file t)
#+END_SRC

** Packages
*** straight.el replacing package.el
| straight.el        | https://github.com/raxod502/straight.el      |

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

*** use-package: A use-package declaration for simplifying your .emacs
| use-package | https://github.com/jwiegley/use-package |
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t) ; Ensure :straight t
#+END_SRC

*** Other alternatives
| package.el         | built-in package system                      |
| quelpa             | https://github.com/quelpa/quelpa             |
| quelpa-use-package | https://github.com/quelpa/quelpa-use-package |
| paradox            | A modern interface for package.el            |

** Benchmarks
#+BEGIN_SRC emacs-lisp
  (cl-letf (((symbol-function 'define-obsolete-function-alias) #'defalias))
    (use-package benchmark-init
      :config
      (require 'benchmark-init-modes) ; explicitly required
      ;; To disable collection of benchmark data after init is done.
      (add-hook 'after-init-hook #'benchmark-init/deactivate)))
#+END_SRC

** Emacs Server
#+BEGIN_SRC emacs-lisp
  ;;; The server part may not be configured so early.
  (load "server") ; Load and start server if it's not running
  (unless (server-running-p) (server-start))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  ;;; Get shell env from user shell.
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)
      (if (and (fboundp 'native-comp-available-p)
               (native-comp-available-p))
          (progn
            (message "Native comp is available")
            ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
            ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
            (add-to-list 'exec-path (concat invocation-directory "bin") t)
            (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
                                           (when (getenv "LIBRARY_PATH")
                                             ":")
                                           ;; This is where Homebrew puts gcc libraries.
                                           (car (file-expand-wildcards
                                                 (expand-file-name "/usr/local/opt/gcc/lib/gcc/11")))))
            (setenv "DYLD_LIBRARY_PATH" (concat (getenv "DYLD_LIBRARY_PATH")
                                                (when (getenv "DYLD_LIBRARY_PATH") ":")
                                                ;; This is where Homebrew puts gcc libraries.
                                                (car (file-expand-wildcards
                                                      (expand-file-name "/usr/local/opt/gcc/lib/gcc/11")))))
            ;; Only set after LIBRARY_PATH can find gcc libraries.
            (setq comp-deferred-compilation t)))))
#+END_SRC
** Configs
#+BEGIN_SRC emacs-lisp
  (setq
   ;; Backups
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs.d/backups"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   vc-make-backup-files t
   ;;(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   ;;(setq delete-old-versiojns -1)
   ;;(setq version-control t)
   auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
   ;; History
   savehist-file "~/.emacs.d/savehist"
   history-length t
   history-delete-duplicates t
   savehist-save-minibuffer-history 1
   savehist-additional-variables '(kill-ring search-ring regex-search-ring))
  (savehist-mode 1)
  (setq-default
   ;; From: https://stackoverflow.com/questions/4657142/how-do-i-encourage-emacs-to-follow-the-compilation-buffer
   compilation-scroll-output t
   ;; (setq compilation-scroll-output 'first-error)
   ;; Prevent Extraneous Tabs
   indent-tabs-mode nil
   fill-column 80
   line-spacing 0.1) ; Line space
  (setq indent-tabs-mode nil)
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
  (defun mkvoya/better-wrap ()
    "Make the word wrap better."
    (interactive)
    (progn
      (visual-line-mode t)
      (setq word-wrap nil)
      ))

  ;; lazy answer
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Clean up spaces
  ;;(bind-key "M-SPC" 'cycle-spacing)

  ;; Show column number
  (column-number-mode 1)

  ;; Sentence
  (setq sentence-end-double-space nil) ; Use only one space to end a sentence

#+END_SRC


*** Scroll bar

| nyan-mode   | https://github.com/TeMPOraL/nyan-mode/     |
| yascroll.el | https://github.com/emacsorphanage/yascroll |

This package is disabled since it conflicts with dashboard and the result is vertico/selectrum's ~M-x~ will cause bugs when there are multiple frames.

#+BEGIN_SRC emacs-lisp
  ;; (use-package yascroll :disabled t :config (global-yascroll-bar-mode 1))
  ;; Don't use nyan-mode unless mode-line is enabled.
  ;; (use-package nyan-mode :disabled t :config (nyan-mode t))
#+END_SRC


*** Window System
#+BEGIN_SRC emacs-lisp

  ;; (when (memq window-system '(mac ns))
  ;;   (add-to-list 'default-frame-alist '(ns-appearance . light)) ;; {light, dark}
  ;;   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  ;;   (setq ns-use-proxy-icon nil)
  ;;   ;; (setq frame-title-format nil)
  ;;   )
  (use-package ns-auto-titlebar
    :config
    (when (eq system-type 'darwin) (ns-auto-titlebar-mode)))
  (setq ns-use-proxy-icon nil)
  (when window-system (set-frame-size (selected-frame) 100 80))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package bind-key :defer t)
#+END_SRC

*** Fonts

#+BEGIN_SRC emacs-lisp
  (use-package cnfonts
    :config
    (setq cnfonts-personal-fontnames
          '(()
            ("TsangerJinKai01" "TsangerJinKai02" "TsangerJinKai03" "TsangerJinKai04" "TsangerJinKai05")
            ()
            ("Apple Color Emoji")
            ))
    (setq cnfonts-profiles
          '("general" "code" "org-mode" "read-book"))
    (setq cnfonts-use-system-type t)
    (setq cnfonts-use-face-font-rescale t)
    (defun set-apple-emoji-font(fontsizes-list)
      (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji") nil 'prepend))
    (add-hook 'cnfonts-set-font-finish-hook #'set-apple-emoji-font)
    ;; 让 cnfonts 在 Emacs 启动时自动生效。
    (cnfonts-mode 1)
    ;; 添加两个字号增大缩小的快捷键
    (define-key cnfonts-mode-map (kbd "C--") #'cnfonts-decrease-fontsize)
    (define-key cnfonts-mode-map (kbd "C-=") #'cnfonts-increase-fontsize)
    )
#+END_SRC

*** diff-hl: Emacs package for highlighting uncommitted changes
| diff-hl | https://github.com/dgutov/diff-hl |
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

#+BEGIN_SRC emacs-lisp

  ;; Winner mode
  (use-package winner :defer t :config (winner-mode 1))

  ;;minibuffer editing
  ;;(use-package miniedit
  ;;  :defer t
  ;;  :commands minibuffer-edit
  ;;  :init (miniedit-install))
#+END_SRC

*** Company: Modular in-buffer completion framework for Emacs
| company-mode | https://github.com/company-mode/company-mode |
#+BEGIN_SRC emacs-lisp
  ;; Autocomplete
  (use-package company
    :after (company-emoji)
    :config
    ;; (add-hook 'prog-mode-hook 'company-mode)
    (setq company-dabbrev-downcase nil
          company-show-numbers t
          company-minimum-prefix-length 2)
    (setq company-tooltip-flip-when-above t)
    (global-company-mode 1)
    ;; (company-statistics-mode 1)
    ;; (require 'company-emoji)
    (setq company-backends
          '((company-files
             company-keywords
             company-capf
             company-yasnippet
             company-emoji)
             ;; company-ispell
             ;; company-lsp)
            (company-abbrev company-dabbrev)))
    ;; (setq company-frontends '(company-pseudo-tooltip-frontend
    ;;                           company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "\C-n") #'company-select-next)
      (define-key company-active-map (kbd "\C-p") #'company-select-previous)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key (make-sparse-keymap) [down-mouse-1] 'ignore)
      (define-key (make-sparse-keymap) [down-mouse-3] 'ignore)
      (define-key (make-sparse-keymap) [mouse-1] 'company-complete-mouse)
      (define-key (make-sparse-keymap) [mouse-3] 'company-select-mouse)
      (define-key (make-sparse-keymap) [up-mouse-1] 'ignore)
      (define-key (make-sparse-keymap) [up-mouse-3] 'ignore)
      )
    (advice-add 'company-complete-common :before (lambda ()
                                                   (setq my-company-point (point))))
    (advice-add 'company-complete-common :after (lambda ()
                                                  (when (equal my-company-point (point)) (yas-expand))))
    (add-hook 'after-init-hook 'global-company-mode)
    )

  (use-package company-posframe
    :after company
    :config
    (company-posframe-mode 1))
#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (setq linum-format "%d ")
  ;; (global-linum-mode t)

  ;;(use-package spaceline-config
  ;;  :config
  ;;  (spaceline-spacemacs-theme))

  ;;; Better evil
  (use-package evil
    ;; :after (smart-mode-line)
    :straight t
    :after (undo-tree)
    :config
    (setq evil-want-fine-undo t)
    (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
    (global-undo-tree-mode)
    (evil-set-undo-system 'undo-tree)
    (use-package evil-numbers
      :demand t
      :config
      (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
      (define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt))
    ;; Evil rebind
    ;; :q should kill the current buffer rather than quitting emacs entirely
    (defun mkvoya/ex-quit ()
      "Evil ex quit."
      (interactive)
      (if (one-window-p "visible")
          (kill-this-buffer)
        (evil-window-delete)))
    (evil-ex-define-cmd "q" #'mkvoya/ex-quit)
    ;; (evil-ex-define-cmd "q" 'mkvoya/betterq)
    ;; Need to type out :quit to close emacs
    (evil-ex-define-cmd "quit" 'evil-quit)
    ;; (setq evil-emacs-state-cursor '("SkyBlue2" bar))
    ;; (setq evil-emacs-state-cursor '(hollow))
    (setq evil-emacs-state-cursor '(bar . 3))
    ;; Disable Evil in snails-mode
    (evil-set-initial-state 'snails-mode 'emacs)
    (evil-set-initial-state 'notdeft-mode 'emacs)
    (evil-set-initial-state 'vterm-mode 'emacs)
    (evil-set-initial-state 'netease-cloud-music-mode 'emacs)
    (evil-mode 1))

  ;;; Easy motion
  ;; Options includes:
  ;; - https://github.com/abo-abo/avy
  ;; - https://github.com/PythonNut/evil-easymotion
  ;; - https://github.com/hlissner/evil-snipe <= This is chosen by now.
  (use-package evil-easymotion
    :after (evil)
    :demand t
    :config
    (evilem-default-keybindings "SPC")
    ;; (evilem-define (kbd "SPC c") 'avy-goto-char)
    ;; (global-set-key (kbd "SPC") 'avy-goto-char)
    (define-key evil-normal-state-map (kbd "SPC") 'avy-goto-char))

  (use-package neotree
    :defer 5)

  ;; (use-package perspective
  ;;   :defer t)
  ;; (persp-mode)

  (use-package flycheck
    :defer t
    :config
    ;; (global-flycheck-mode)
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (setq flycheck-indication-mode 'left-fringe)
    (use-package flycheck-color-mode-line
      :after (flycheck)
      :defer t
      :config
      (eval-after-load "flycheck"
        '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))
    (use-package flycheck-status-emoji
      :after (flycheck)
      :defer t)
    ;; Flycheck + proselint
    (flycheck-define-checker proselint
      "A linter for prose."
      :command ("proselint" source-inplace)
      :error-patterns
      ((warning line-start (file-name) ":" line ":" column ": "
                (id (one-or-more (not (any " "))))
                (message) line-end))
      :modes (text-mode markdown-mode gfm-mode org-mode))
    (add-to-list 'flycheck-checkers 'proselint)
    )

  ;; optional: this is the evil state that evil-magit will use
  ;; (setq evil-magit-state 'normal)
  ;; optional: disable additional bindings for yanking text
  ;; (setq evil-magit-use-y-for-yank nil)
  (use-package evil-magit
    :after (evil magit)
    :defer t)

  (setq confirm-kill-emacs 'y-or-n-p)

#+END_SRC

*** Ctrl-f
#+BEGIN_SRC emacs-lisp
  (use-package ctrlf
    :defer 5
    :config
    (ctrlf-mode +1))
#+END_SRC

*** smart-tab
#+BEGIN_SRC emacs-lisp
  ;;; Smart Tab
  (use-package smart-tab
    :straight nil
    :defer 5
    :config
    (smart-tabs-insinuate 'c 'javascript))
#+END_SRC

*** Cheatsheet

#+BEGIN_SRC emacs-lisp
  ;;; MK's cheatsheet
  (use-package cheatsheet
    :config
    (cheatsheet-add :group 'Emacs
                    :key "C-x u"
                    :description "Emacs Undo.")
    (cheatsheet-add :group 'Emacs
                    :key "C-x e"
                    :description "Execute the e-lisp expression under the cursor.")
    (cheatsheet-add :group 'OrgMode
                    :key "C-c h"
                    :description "Open Home Org.")
    (cheatsheet-add :group 'OrgMode
                    :key "C-c a"
                    :description "Open Org Agenda.")
    (cheatsheet-add :group 'OrgMode
                    :key "C-c c"
                    :description "Capture.")
    )

#+END_SRC


*** Smooth scrolling
#+BEGIN_SRC emacs-lisp
  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

  ;;(use-package etags-select)

  ;;;; Mouse scrolling in terminal emacs
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    ;; ensure mouse
    (xterm-mouse-mode t)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

  ;; (use-package sublimity
  ;;   :config
  ;;   ;; (use-package sublimity-scrollt)
  ;;   (use-package sublimity-map :ensure nil) ;; experimental
  ;;   ;; (use-package sublimity-attractive :ensure nil)
  ;;   (sublimity-mode t)
  ;;   )

  ;; Do we still need this if we have good-scroll?
  ;; (use-package smooth-scrolling
  ;;   :config
  ;;   ;; the number 3 is buggy here when scrolling down.
  ;;   (setq smooth-scroll-margin 2)
  ;;   (smooth-scrolling-mode 1)
  ;;   )
  ;;; The effect of good-scroll is good, but slow.
  (use-package good-scroll
    :disabled t
    :config
    (good-scroll-mode t))

#+END_SRC


*** Modeline
| doom-modeline   |  |
| smart-mode-line |  |

#+BEGIN_SRC emacs-lisp
  (use-package awesome-tray
    :after (notmuch)
    :straight (:host github :repo "manateelazycat/awesome-tray")
    :config
    ;; (setq mode-line-format nil)
    (setq window-divider-default-right-width 2)
    (setq window-divider-default-bottom-width 2)
    (setq window-divider-default-places t)
    (window-divider-mode 1)
    (setq-default mode-line-format nil)

    (defface awesome-tray-module-notmuch-face
      '((t (:italic t)))
      "Hello module face."
      :group 'awesome-tray)
    (defun notmuch-open-unread-view()
      "Open notmuch panel for unread mails."
      (interactive)
      (notmuch-search "tag:unread"))
    (defun awesome-tray-module-notmuch-info ()
      (let ((info (format "[%s]" (replace-regexp-in-string "\n" "" (notmuch-command-to-string "count" "tag:unread")))))
        (propertize
         info
         'help-echo "Unread!"
         'local-map (let ((map (make-sparse-keymap)))
                      (define-key map [mouse-1]
                                  #'notmuch-open-unread-view)
                      map)
         )))

    (add-to-list 'awesome-tray-module-alist
                 '("notmuch" . (awesome-tray-module-notmuch-info
                                awesome-tray-module-battery-face)))

    ;; From https://github.com/milkypostman/powerline/blob/master/powerline.el#L262-L333
    (defun pl/make-xpm (name color1 color2 data)
      "Return an XPM image with NAME using COLOR1 for enabled and COLOR2 for disabled bits specified in DATA."
      (when window-system
        (create-image
         (concat
          (format "/* XPM */
                            static char * %s[] = {
                            \"%i %i 2 1\",
                            \". c %s\",
                            \"  c %s\",
                            "
                  (downcase (replace-regexp-in-string " " "_" name))
                  (length (car data))
                  (length data)
                  (or color1 "None")
                  (or color2 "None"))
          (let ((len  (length data))
                (idx  0))
            (apply 'concat
                   (mapcar #'(lambda (dl)
                               (setq idx (+ idx 1))
                               (concat
                                "\""
                                (concat
                                 (mapcar #'(lambda (d)
                                             (if (eq d 0)
                                                 (string-to-char " ")
                                               (string-to-char ".")))
                                         dl))
                                (if (eq idx len)
                                    "\"};"
                                  "\",\n")))
                           data))))
         'xpm t :scale 1 :ascent 'center)))

    (defun pl/percent-xpm (height pmax pmin winend winstart width color1 color2)
      "Generate percentage xpm of HEIGHT for PMAX to PMIN given WINEND and WINSTART with WIDTH and COLOR1 and COLOR2."
      (let* ((height- (1- height))
             (fillstart (round (* height- (/ (float winstart) (float pmax)))))
             (fillend (round (* height- (/ (float winend) (float pmax)))))
             (data nil)
             (i 0))
        (setq fillstart (- fillstart 1))
        (setq fillend (+ fillend 1))
        (while (< i height)
          (setq data (cons
                      (if (and (<= fillstart i)
                               (<= i fillend))
                          (append (make-list width 1))
                        (append (make-list width 0)))
                      data))
          (setq i (+ i 1)))
        (pl/make-xpm "percent" color1 color2 (reverse data))))


    (defun awesome-tray-module-scroll-info ()
      (let ((width 2)
            (color1 "#ff3fef")
            (color2 "#2a2a2a")
            (height 15)
            pmax
            pmin
            (ws (window-start))
            (we (window-end)))
        (save-restriction
          (widen)
          (setq pmax (point-max))
          (setq pmin (point-min)))
        (pl/percent-xpm height pmax pmin we ws
                        (* (frame-char-width) width) color1 color2)))

    (setq awesome-tray-info-padding-right 4)

    ;; Override for the scroll image display.
    (defun awesome-tray-flush-info ()
      (let* ((tray-info (awesome-tray-build-active-info))
             (scroll-info (awesome-tray-module-scroll-info)))
        (with-current-buffer " *Minibuf-0*"
          (erase-buffer)
          (insert (concat (make-string (max 0 (- (awesome-tray-get-frame-width) (string-width tray-info) awesome-tray-info-padding-right)) ?\ ) tray-info))
          (insert " ")
          (insert-image scroll-info)
          )))
    (setq awesome-tray-active-modules
          '("location" "buffer-name" "belong" "file-path" "buffer-read-only"
            "mode-name" "circe" "notmuch" "evil" "date"))
    (awesome-tray-mode 1)
    )
#+END_SRC

*** Undo-tree
| undo-tree | built-in |

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :delight
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
#+END_SRC

*** Yasnippet: A template system for Emacs
| yasnippet | https://github.com/joaotavora/yasnippet |

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure nil
    :defer 5
    :config
    (use-package yasnippet-snippets
      :defer 5
      :after (yasnippet))
    (yas-global-mode 1)
    )
#+END_SRC

*** Beacon - A light that follows your cursor around so you don't lose it!
| beacon | https://github.com/Malabarba/beacon |

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (setq beacon-color "#00ff00")
    ;; (setq beacon-size 40)
    (beacon-mode 1))
#+END_SRC

*** Which-Key: Emacs package that displays available keybindings in popup
| which-key | https://github.com/justbur/emacs-which-key |

#+BEGIN_SRC emacs-lisp
  ;; which-key is a fork of guide-key
  (use-package which-key
    :defer 5
    :bind (
           ("C-h ,m" . which-key-show-major-mode)
           ("C-h ,t" . which-key-show-top-level)
           ("C-h ,n" . which-key-show-next-page)
           )
    :config
    (setq which-key-show-remaining-keys t)

    (setq which-key-idle-delay 1)
    (setq which-key-sort-order 'which-key-prefix-then-key-order)
    (which-key-mode)
    (which-key-setup-minibuffer))
#+END_SRC

*** Themes
| monokai-them     |   |
| grandshell-theme |   |
| alect-themes     |   |
| airline-themes   |   |
| manoj-light      |   |
| doom-one-light   |   |
| hemisu-light     |   |

#+BEGIN_SRC emacs-lisp
  (use-package hemisu-theme
    :straight (:host github :repo "mkvoya/hemisu-theme" :files ("*.el"))
    :config
    (load-theme 'hemisu-light t)
    (setq modeline-bgcolor "#281a0f")
    (setq modeline-alertcolor "#c82a2f")
    (setq modeline-alertcolor "#782a2f")

    (defun modeline-alert()
      (custom-theme-set-faces
       'user
       `(mode-line ((t (:background ,modeline-alertcolor :font "Sarasa Mono SC-11"))))
       `(mode-line-inactive ((t (:background "#c9cabf" :font "Sarasa Mono SC-11"))))))
    (defun modeline-normal()
      (custom-theme-set-faces
       'user
       `(mode-line ((t (:background ,modeline-bgcolor))))
       `(mode-line-inactive ((t (:background "#c9cabf"))))))
    (modeline-normal)

    )
#+END_SRC


*** Rainbow

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (rainbow-mode t))
#+END_SRC

*** delight: altering mode appearences on mode line
| diminish         |                                            |
| delight (better) | https://elpa.gnu.org/packages/delight.html |


*** Async

#+BEGIN_SRC emacs-lisp
  (use-package async :defer 5)
#+END_SRC


** Calender

#+BEGIN_SRC emacs-lisp
  (setq calendar-chinese-all-holidays-flag t)
  (use-package cal-china-x
    :defer t
    :config
    (setq mark-holidays-in-calendar t)
    (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
    (setq cal-china-x-general-holidays '((holiday-lunar 1 15 "元宵节")))
    (setq calendar-holidays
          (append cal-china-x-important-holidays
                  cal-china-x-general-holidays))
    )
#+END_SRC

*** Calfw - A calendar framework for Emacs
| Calfw | https://github.com/kiwanami/emacs-calfw |
#+BEGIN_SRC emacs-lisp
  (use-package calfw :defer t)
  (use-package calfw-org :defer t :after (calfw org))
#+END_SRC
*** whitespace
| whitespace | Built-in | http://ergoemacs.org/emacs/whitespace-mode.html |
#+BEGIN_SRC emacs-lisp
  ;;; Use whitespace (instead of column-marker, column-enforce-mode)
  (use-package whitespace
    :ensure nil
    :config
    (setq whitespace-style
          '(face trailing tabs newline tab-mark newline-mark))
    ;; '(face trailing tabs newline tab-mark newline-mark lines-tail)
    (setq whitespace-display-mappings
          '((newline-mark 10 [8617 10])
            (tab-mark 9 [8594 9] [92 9])))
    (set-face-background 'trailing-whitespace "#ffaf5f")
    (set-face-background 'whitespace-trailing "#ffaf5f")
    ;; (global-whitespace-mode t)
    (add-hook 'prog-mode-hook 'whitespace-mode)
    )
#+END_SRC
** Languages
*** Programming mode
#+BEGIN_SRC emacs-lisp
  (defun make-underscore-part-of-words () (modify-syntax-entry ?_ "w"))
  (add-hook 'prog-mode-hook #'make-underscore-part-of-words)
  (add-hook 'prog-mode-hook 'linum-mode)
  ;;(add-hook 'prog-mode-hook
  ;;         (lambda () (add-to-list 'write-file-functions
  ;;                                 'delete-trailing-whitespace)))
#+END_SRC
*** PostScript/ps
#+BEGIN_SRC emacs-lisp
  (add-hook 'ps-mode-hook 'doc-view-toggle-display)
#+END_SRC
*** C
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook
            (lambda() (setq tab-width 8
                            c-default-style "linux"
                            c-basic-offset 8
                            c-indent-tabs-mode t)))
#+END_SRC
*** C++
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
  ;; style I want to use in c++ mode
  (c-add-style "my-style"
               '("stroustrup"
                 (c-basic-offset . 4)            ; indent by four spaces
                 (tab-width . 4)
                 (indent-tabs-mode . t)        ; use tabs
                 (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
                                     (brace-list-open . 0)
                                     (innamespace . [0])
                                     (statement-case-open . +)))))
  (c-add-style "my-ycsb-c++-style"
               '("stroustrup"
                 (c-basic-offset . 2)            ; indent by four spaces
                 (tab-width . 2)
                 (indent-tabs-mode . nil)        ; use tabs
                 (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
                                     (brace-list-open . 0)
                                     (innamespace . [0])
                                     (statement-case-open . +)))))
  (defun my-c++-mode-hook ()
    (c-set-style "my-ycsb-c++-style"))        ; use my-style defined above
  (add-hook 'c++-mode-hook 'my-c++-mode-hook)
  (use-package modern-cpp-font-lock
    :ensure t)
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :defer t
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :config
    ;; (custom-set-variables '(markdown-command "/usr/local/bin/pandoc"))
    (setq markdown-command "/usr/local/bin/pandoc")

    (setq markdown-preview-stylesheets (list "https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css"))
    ;;"http://thomasf.github.io/solarized-css/solarized-light.min.css"
    )
  (use-package flymd
    :after (markdown-mode))
#+END_SRC

** LaTeX
#+BEGIN_SRC emacs-lisp
       ;;; AucTex
  (use-package tex
    :straight auctex
    :defer 5
    :config
    ;; make latexmk available via C-c C-c
    ;; Note: SyncTeX is setup via ~/.latexmkrc (see below)
    ;; (add-to-list 'TeX-command-list '("latexmk" "latexmk -pdf -escape-shell %s" TeX-run-TeX nil t :help "Run latexmk on file"))
    (add-to-list 'TeX-command-list '("Make" "make" TeX-run-command nil t))
    (add-to-list 'TeX-command-list '("Make Clean" "make clean" TeX-run-command nil t))
    ;; (setq-default TeX-command-default "Make")
    ;; from https://gist.github.com/stefano-meschiari/9217695
    (setq TeX-auto-save t)
    (setq Tex-parse-self t)
    ;; Guess/Ask for the master file.
    (setq-default TeX-master nil)

    (add-hook 'TeX-mode-hook (lambda () (setq TeX-command-default "Make")))
    (add-hook 'LaTeX-mode-hook (lambda()
                                 (mkvoya/better-wrap)
                                 (flyspell-mode)
                                 (LaTeX-math-mode)))
    (setq reftex-refstyle "\\ref")
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)

    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
          '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

    (setq TeX-error-overview-open-after-TeX-run t)
    ;; (setq mkvoya/tex-auto-compile nil)
    ;; (defun mkvoya/tex-try-auto-compile ()
    ;;   (when (and (eq major-mode 'TeX-mode)
    ;;              (mkvoya/tex-auto-compile))
    ;;     (TeX-command-run))
    ;;   )
    ;; (add-hook 'after-save-hook #'mkvoya/tex-try-auto-compile)

    (use-package company-auctex
      :defer t
      :after (company)
      :config
      (company-auctex-init))
    (use-package reftex
      :defer 5
      :config
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
      (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
      (setq reftex-default-bibliography '("./references.bib"))
      )
    (use-package company-reftex
      :defer t
      :after (company reftex)
      :config
      (add-to-list 'company-backends 'company-reftex-labels)
      (add-to-list 'company-backends 'company-reftex-citations))
    (use-package auctex-latexmk)
    )
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    ;; :delight '(:eval (concat "⎈[" (projectile-project-name) "]"))
    :straight (:host github :repo "bbatsov/projectile" :files ("projectile.el"))
    :delight projectile-mode
    :config
    (projectile-mode +1)
    ;; (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    ;; (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )
#+END_SRC

*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :diminish dashboard-mode
    :config
    (setq dashboard-banner-logo-title "What a nice day!")
    ;;(setq dashboard-startup-banner "/path/to/image")
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)
                            (agenda . 5)
                            (projects . 5)
                            (registers . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/45546/per-mode-value-for-fill-column
  (defun mkvoya/tex-mode-hook ()
    (setq fill-column 1024))
  (add-hook 'TeX-mode-hook #'mkvoya/tex-mode-hook)

  (use-package svg-tag-mode
    :disabled t
    :straight (:host github :repo "rougier/svg-tag-mode" :files ("svg-tag-mode.el")))
#+END_SRC




*** Tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :straight nil
    :ensure nil
    :defer 5
    :config
    ;; (setq tramp-debug-buffer t)
    (setq tramp-verbose 10)
    (customize-set-variable
     'tramp-ssh-controlmaster-options
     (concat
      "-o ControlPath=/Volumes/ramfs/ssh-ControlPath-%%r@%%h:%%p "
      "-o ControlMaster=auto -o ControlPersist=yes"))
    )

  (setq alert-default-style 'libnotify)
  (setq org-alert-headline-regexp "\\(SCHEDULED:.+\\|DEADLINE:.+\\)")

  (modify-syntax-entry ?_ "w")

        ;;; ========== Charset and Unicode and Emoji =============
  ;; UTF-8
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPUND_TEXT TEXT STRING)))

  ;; Emoji
  (set-fontset-font t 'emoji (font-spec :family "Apple Color Emoji") nil 'prepend)
  (use-package company-emoji)


  ;; Unicode
  (defmacro my/insert-unicode (unicode-name)
    `(lambda () (interactive)
       (insert-char (cdr (assoc-string, unicode-name (ucs-names))))))
  (bind-key "C-x 8 s" (my/insert-unicode "ZERO WIDTH SPACE"))
  (bind-key "C-x 8 S" (my/insert-unicode "SNOWMAN"))
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; (use-package emojify
  ;;   :hook (after-init . global-emojify-mode))

  ;; (use-package unicode-fonts
  ;;   :disabled t
  ;;   :config
  ;;   (setq unicode-fonts-skip-font-groups
  ;;         '(chinese-simplified chinese-traditional
  ;;                              chinese-hanja chinese-kanji chinese-nom
  ;;                              multicolor decorative low-quality-glyphs))
  ;;   ;; This breaks the Sarasa font
  ;;   ;; (unicode-fonts-setup)
  ;;   )

       ;;; =========== Some builtin modes =============
       ;;; https://emacs-china.org/t/emacs-builtin-mode/11937

  (use-package paren
    :defer 5
    :hook (after-init . show-paren-mode)
    :config
    (setq show-paren-when-point-inside-paren t
          show-paren-when-point-in-periphery t))
  (use-package so-long
    :defer 5
    :config (global-so-long-mode 1))
  (use-package simple
    :straight nil
    :hook (after-init . (lambda ()
                          (line-number-mode)
                          (column-number-mode)
                          (size-indication-mode)
                          ;; better line wrapping for cjk. Try =toggle-word-wrap=
                          (setq-default word-wrap nil)
                          (setq word-wrap nil)
                          )))

         ;;; ========== End of Some builtin modes ===========
#+END_SRC

** Completion
*** Main Completion
| vertico | https://github.com/minad/vertico |

Alternatives (Check the selectrum repo README)
| Ido       |   |
| Helm      |   |
| Ivy       |   |
| Icomplete |   |
| Icicles   |   |
| Snails    |   |
| Snallet   |   |
| Raven     |   |
| Swiper    |   |
| Selectrum | https://github.com/raxod502/selectrum |

#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :defer t
    :init
    (vertico-mode)
    (setq vertico-cycle t))

;;  (use-package vertico-posframe
;;    :straight (:host github :repo "tumashu/vertico-posframe" :files ("*.el"))
;;    :after (vertico)
;;    :config
;;    (vertico-posframe-mode 1)
;;    (setq vertico-posframe-parameters
;;          '((left-fringe . 8)
;;            (right-fringe . 8)))
;;    )

  ;; Use the `orderless' completion style.
  ;; Enable `partial-completion' for files to allow path expansion.
  ;; You may prefer to use `initials' instead of `partial-completion'.
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure nil
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure nil
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Grow and shrink minibuffer
    ;;(setq resize-mini-windows t)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
#+END_SRC

*** Very Large File
#+BEGIN_SRC emacs-lisp
  ;;; View Large Files
  (use-package vlf
    :defer t)
#+END_SRC


*** consult.el - Consulting completing-read
| consult | https://github.com/minad/consult |

#+BEGIN_SRC emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-project-imenu)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s L" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           :map isearch-mode-map
           ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
           ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer.
    ;; This is relevant when you use the default completion UI,
    ;; and not necessary for Selectrum, Vertico etc.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

  ;; Optionally add the `consult-flycheck' command.
  (use-package consult-flycheck
    :bind (:map flycheck-command-map
                ("!" . consult-flycheck)))

  ;; A few more useful configurations...
  (use-package emacs
    :ensure nil
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)
    ;; Enable indentation+completion using the TAB key.
    ;; Completion is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  ;; ========= End of Consult ===========
#+END_SRC


*** 无错
#+BEGIN_SRC emacs-lisp
  (use-package wucuo
    :disabled t
    :config
    (add-hook 'prog-mode-hook #'wucuo-start)
    (add-hook 'text-mode-hook #'wucuo-start)
    (setq ispell-program-name "aspell")
    ;; You could add extra option "--camel-case" for since Aspell 0.60.8
    ;; @see https://github.com/redguardtoo/emacs.d/issues/796
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together" "--run-together-limit=16" "--camel-case")))
#+END_SRC

*** marginalia.el -- Marginalia in the minibuffer
| marginalia | https://github.com/minad/marginalia |
#+BEGIN_SRC emacs-lisp
  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    :defer 5
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode)
    ;; Prefer richer, more heavy, annotations over the lighter default variant.
    ;; E.g. M-x will show the documentation string additional to the keybinding.
    ;; By default only the keybinding is shown as annotation.
    ;; Note that there is the command `marginalia-cycle-annotators` to
    ;; switch between the annotators.
    (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light))
    )
#+END_SRC
*** Embark: Emacs Mini-Buffer Actions Rooted in Keymaps
| Embark | https://github.com/oantolin/embark/ |
#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind (:map minibuffer-local-map
                ("C-o" . embark-act)
                ("C-S-o" . embark-act-noexit)
                :map embark-file-map
                ("j" . dired-jump)))
#+END_SRC
** LSP
| nox      |                                       |
| lsp-mode | https://github.com/emacs-lsp/lsp-mode |
| elgot    |                                       |

** Language and checking
| flycheck-languagetool | https://github.com/emacs-languagetool/flycheck-languagetool |
| flycheck-grammarly    | https://github.com/emacs-grammarly/flycheck-grammarly       |
| lsp-ltex              | https://github.com/emacs-languagetool/lsp-ltex/             |
| languagetool          | https://github.com/PillFall/Emacs-LanguageTool.el           |

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-languagetool
    :hook (text-mode . (lambda ()
                         (require 'flycheck-languagetool)))
    :init
    (setq flycheck-languagetool-server-jar
          "/usr/local/Cellar/languagetool/5.4/libexec/languagetool-server.jar")
    (setq flycheck-languagetool-language "en-US")
    )
  (use-package flycheck-grammarly
    ;; :hook (text-mode . (lambda ()
    ;;                      (require 'flycheck-languagetool)))
    :disabled t
    :config
    (setq flycheck-grammarly-check-time 0.8)
    )
#+END_SRC

** Mail Client
| notmuch    |   |
| WanderLust |   |
#+BEGIN_SRC emacs-lisp
  ;; Mails
  (use-package notmuch :ensure nil)
#+END_SRC


** Feeding (RSS & Atom)
| elfeed | https://github.com/skeeto/elfeed |
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :config
    ;; Global key
    (global-set-key (kbd "C-x w") 'elfeed)
    ;; The feed list
    (setq elfeed-feeds
          '(("http://nullprogram.com/feed/" blog emacs)
            "http://www.50ply.com/atom.xml"  ; no autotagging
            ("http://nedroid.com/feed/" webcomic)
            "http://planet.emacsen.org/atom.xml"))
    ;; (setq-default elfeed-search-filter "@1-week-ago +unread ")
    )
#+END_SRC

** Org-mode
*** Org
#+BEGIN_SRC emacs-lisp

  ;; Enable Org mode
  (use-package org
    :defer 2
    :init
    (setq org-modules '(ol-doi
                        ;; ol-w3m o-bbdb ol-gnus ol-mhe ol-rmail ol-eww
                        ol-bibtex
                        ol-docview
                        ol-irc
                        ol-info))
    :config
    ;; Shortcuts
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (setq org-display-remote-inline-images 'download)

    ;; Auto add DONE TIME, from https://orgmode.org/guide/Progress-Logging.html
    (setq org-log-done 'time)

    ;; Org mode TODO states
    (setq org-todo-keywords
          '((sequence
             "TODO(t)" "HAND(h)" "WAIT(w)" "LONG-TERM(l)" "DELEGATE(g)" "IDEA(i)" "EXP(e)" "TIP(i)" "COLL(C)"
             "|"
             "DONE(d!)" "CANCELED(c@)")))
    ;; Keyword colors
    (setf org-todo-keyword-faces
          '(
            ;; Many styles from https://github.com/GTrunSec/my-profile/blob/master/dotfiles/doom-emacs/config.org
            ("TODO" . (:foreground "#ff39a3" :weight bold))
            ("HAND"  . "orangered")
            ("WAIT" . "pink")
            ("CANCELED" . (:foreground "white" :background "#4d4d4d" :weight bold))
            ;; ("DONE" . "#008080")
            ("DONE" . (:foreground "#808080" :strike-through "#0d0d0d"))
            ("DELEGATE"  . "DeepSkyBlue")
            ))

    ;; Strike through the whole line with DONE entry
    (font-lock-add-keywords
     'org-mode
     '(("\\* \\<DONE .*" 0 'shr-strike-through append))
     t)
    (font-lock-add-keywords
     'org-mode
     '(("\\* \\<CANCELED .*" 0 'shr-strike-through append))
     t)

    ;; ;; define a useless face
    ;; (defface tiny-font '((t :height 100)) "Face for function parameters." :group 'org-mode)
    ;; ;; shrink the size of PROPERTY list
    ;; (font-lock-add-keywords
    ;;  'org-mode
    ;;  '((" ?*\\:PROPERTIES\\:\\(\n.*?\\)*?.*?\\:END\\:\n" 0 '(:height 100) append))
    ;;  t)
    ;; ;; Does not work well when font-lock is used
    ;; ;; (add-text-properties 179 252 '(line-height 1))
    ;; ;; (set-text-properties 179 252 '(face tiny-font))
    ;; ;; (add-face-text-property 179 252 '(:height 120) t)

    ;; from https://github.com/psamim/dotfiles/blob/master/doom/config.el#L73
    ;; (setq org-ellipsis "…")
    ;; ➡, ⚡, ▼, ↴, , ∞, ⬎, ⤷, ⤵
    ;; (setq org-ellipsis "↴▾▽▼↩↘↸")
    (setq org-ellipsis "▾")

    ;; https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
    (defun org-force-open-current-window ()
      "Open at current window."
      (interactive)
      (let ((org-link-frame-setup (quote
                                   ((vm . vm-visit-folder)
                                    (vm-imap . vm-visit-imap-folder)
                                    (file . find-file)
                                    (wl . wl)))
                                  ))
        (org-open-at-point)))

    ;; Depending on universal argument try opening link
    (defun org-open-maybe (&optional arg)
      "Open maybe ARG."
      (interactive "P")
      (if arg (org-open-at-point)
        (org-force-open-current-window)))
    ;; Redefine file opening without clobbering universal argument
    (define-key org-mode-map "\C-c\C-o" 'org-open-maybe)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((dot . t)
       (C . t)
       (python . t)))

    ;; https://emacs.stackexchange.com/questions/3302/live-refresh-of-inline-images-with-org-display-inline-images
    ;; Always redisplay inline images after executing SRC block
    (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

    ;; Better blocks
    (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "✎")
                                           ("#+END_SRC" . "□")
                                           ("#+begin_src" . "λ")
                                           ("#+end_src" . "□")
                                           ("#+begin_quote" . ?»)
                                           ("#+end_quote" . ?«)
                                           ("#+BEGIN_QUOTE" . ?»)
                                           ("#+END_QUOTE" . ?«)
                                           ("[ ]" . "☐")
                                           ("[X]" . "☑")
                                           ("[-]" . "❍")
                                           ("PROPERTIES" . "⚙")
                                           ))
    (require 'color)
    (set-face-attribute 'org-block nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 3))
    (set-face-attribute 'org-code nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 3))
    (set-face-attribute 'org-quote nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 3))
    (setq org-fontify-quote-and-verse-blocks t)
    (set-face-attribute 'org-block-begin-line nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 4))
    (set-face-attribute 'org-block-end-line nil :background
                        (color-darken-name
                         (face-attribute 'default :background) 4))

    (add-hook 'org-mode-hook
              (lambda ()
                ;; (org-shifttab 5)
                (add-to-list 'write-file-functions 'delete-trailing-whitespace)
                (electric-indent-local-mode -1)
                (mkvoya/better-wrap)
                (prettify-symbols-mode)
                ;; (org-hide-properties)
                ))

                       ;;; According to https://orgmode.org/manual/Hard-indentation.html#Hard-indentation
                       ;;; But I don't need the odd levels only
    (setq org-adapt-indentation t
          org-hide-leading-stars t)
    ;;org-odd-levels-only t

    (use-package org-contrib)

    (defun __org-indent--compute-prefixes ()
      "Compute prefix strings for regular text and headlines."
      (setq org-indent--heading-line-prefixes
            (make-vector org-indent--deepest-level nil))
      (setq org-indent--inlinetask-line-prefixes
            (make-vector org-indent--deepest-level nil))
      (setq org-indent--text-line-prefixes
            (make-vector org-indent--deepest-level nil))
      (when (> org-indent-indentation-per-level 0)
        (dotimes (n org-indent--deepest-level)
          (let ((indentation (if (<= n 1) 0
                               (* (1- org-indent-indentation-per-level)
                                  (1- n)))))
            ;; Headlines line prefixes.
            (let ((heading-prefix (make-string indentation ?*)))
              (aset org-indent--heading-line-prefixes
                    n
                    (org-add-props heading-prefix nil 'face 'org-macro))
              ;; Inline tasks line prefixes
              (aset org-indent--inlinetask-line-prefixes
                    n
                    (cond ((<= n 1) "")
                          ((bound-and-true-p org-inlinetask-show-first-star)
                           (concat org-indent-inlinetask-first-star
                                   (substring heading-prefix 1)))
                          (t (org-add-props heading-prefix nil 'face 'org-macro)))))
            ;; Text line prefixes.
            ;;(make-string (+ n indentation) ?\s)
            (aset org-indent--text-line-prefixes
                  n
                  (org-add-props
                      (concat (string-join (-repeat (1- n)
                                                    (concat "|" (make-string (1- org-indent-indentation-per-level) ?\s))))
                              (and (> n 0)
                                   (char-to-string ?\s)))
                      nil 'face 'org-macro))))))


    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; Org Style
  ;; from https://www.lijigang.com/blog/2018/08/08/神器-org-mode/#org4288876
  (setq org-startup-indented t)
  (use-package org-superstar
    :after (org)
    :config
    (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
    ;; Stop cycling bullets to emphasize hierarchy of headlines.
    (setq org-superstar-cycle-headline-bullets nil)
    ;; Hide away leading stars on terminal.
    (setq org-superstar-leading-fallback ?\s)
    (setq org-indent-mode-turns-on-hiding-stars nil)
    (setq org-hide-leading-stars t)
    (setq org-superstar-item-bullet-alist
          '((?* . ?⌬) ; * ; previously used: 8226
            (?+ . ?⋇) ; + ; previously used: 10210
            (?- . ?▪))) ; - ; previously used: 8211
    ;; ●◆◼►▸▮▪■⚈⚉⌫⌦☑ ◉◈○▷ "①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨" ⎋〄
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; agenda 里面时间块彩色显示
  ;; From: https://emacs-china.org/t/org-agenda/8679/3
  (defun ljg/org-agenda-time-grid-spacing ()
    "Set different line spacing w.r.t. time duration."
    (save-excursion
      (let* ((background (alist-get 'background-mode (frame-parameters)))
             (background-dark-p (string= background "dark"))
             (colors (list "#1ABC9C" "#2ECC71" "#3498DB" "#9966ff"))
             pos
             duration)
        (nconc colors colors)
        (goto-char (point-min))
        (while (setq pos (next-single-property-change (point) 'duration))
          (goto-char pos)
          (when (and (not (equal pos (point-at-eol)))
                     (setq duration (org-get-at-bol 'duration)))
            (let ((line-height (if (< duration 30) 1.0 (+ 0.5 (/ duration 60))))
                  (ov (make-overlay (point-at-bol) (1+ (point-at-eol)))))
              (overlay-put ov 'face `(:background ,(car colors)
                                                  :foreground
                                                  ,(if background-dark-p "black" "white")))
              (setq colors (cdr colors))
              (overlay-put ov 'line-height line-height)
              (overlay-put ov 'line-spacing (1- line-height))))))))
  (add-hook 'org-agenda-finalize-hook #'ljg/org-agenda-time-grid-spacing)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; Paste Image From https://emacs-china.org/t/topic/6601/4
  (defun org-insert-image ()
    "Insert a image from clipboard."
    (interactive)
    (let* ((path (concat default-directory
                         (buffer-name)
                         ".assets/"))
           (image-file (concat
                        path
                        (buffer-name)
                        (format-time-string "_%Y%m%d_%H%M%S.png"))))
      (if (not (file-exists-p path))
          (mkdir path))
      (do-applescript (concat
                       "set the_path to \"" image-file "\" \n"
                       "set png_data to the clipboard as «class PNGf» \n"
                       "set the_file to open for access (POSIX file the_path as string) with write permission \n"
                       "write png_data to the_file \n"
                       "close access the_file"))
      ;; (shell-command (concat "pngpaste " image-file))
      (org-insert-link nil
                       (concat "file:" image-file)
                       "")
      (message image-file))
    (org-display-inline-images)
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;;; from https://christiantietze.de/posts/2019/12/emacs-notifications/
  (use-package appt
    :straight nil
    :defer 10
    :config
    (setq
     appt-time-msg-list nil ;; clear existing appt list
     appt-display-interval '5 ;; warn every 5 minutes from t - appt-message-warning-time
     appt-message-warning-time '15 ;; send first warning 15 minutes before appointment
     appt-display-mode-line nil ;; don't show in the modeline
     appt-display-format 'window) ;; pass warnings to the designated window function
    (setq appt-disp-window-function (function ct/appt-display-native))

    (appt-activate 1) ;; activate appointment notification
                                          ; (display-time) ;; Clock in modeline

    (setq exec-path (append '("~/.emacs.d/3rd-parties/alerter/bin") exec-path))
    (defvar alerter-command (executable-find "alerter") "The path to alerter.")

    (defun ct/send-notification (title msg)
      "Send notification (TITLE MSG)."
      (let ((notifier-path (executable-find "alerter")))
        (start-process
         "Appointment Alert"
         "*Appointment Alert*" ; use `nil` to not capture output; this captures output in background
         notifier-path
         "-message" msg
         "-title" title
         "-sender" "org.gnu.Emacs"
         "-activate" "org.gnu.Emacs")))
    (defun mkvoya/marquee-message-display (title message)
      (marquee-header-notify (concat "!NOTICE! " title ": " message)))
    (defun ct/appt-display-native (min-to-app new-time msg)
      "Appt display native (MIN-TO-APP NEW-TIME MSG)."
      ;; (ct/send-notification)
      (mkvoya/marquee-message-display
       (format "Appointment in %s minutes" min-to-app) ; Title
       (format "%s" msg))) ; Message/detail text

    ;; Agenda-to-appointent hooks
    (org-agenda-to-appt) ;; generate the appt list from org agenda files on emacs launch
    (run-at-time "24:01" 3600 'org-agenda-to-appt) ;; update appt list hourly
    (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt) ;; update appt list on agenda view
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-html
    :straight nil
    :after (org)
    :config
    ;; Org export code style
    (setq org-html-htmlize-output-type 'css)
    (setq-default org-html-doctype "html5")
    (setq-default org-html-html5-fancy t)
    )
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :disabled
    :ensure nil
    :after (org)
    :defer t
    :config
    (let* ((note-dir "~/Dropbox/Dreams/Research/Papers/Notes/")
           (note-file (concat note-dir "Notes.org"))
           (bib-file "~/Dropbox/Dreams/Research/Papers/Main.bib")
           (pdf-dir "~/Dropbox/Dreams/Research/Papers"))
      (setq reftex-default-bibliography bib-file)
      ))
#+END_SRC

*** Calender sync
#+BEGIN_SRC emacs-lisp
  ;;; https://www.pengmeiyu.com/blog/sync-org-mode-agenda-to-calendar-apps/
  (use-package ox-icalendar
    :straight nil
    :after (org)
    :config
    (setq org-icalendar-alarm-time 5)
    (setq org-icalendar-combined-agenda-file "~/Dropbox/Dreams/Org/org.ics"
          org-icalendar-include-todo 'all
          org-icalendar-store-UID t
          org-icalendar-timezone ""
          org-icalendar-use-deadline
          '(event-if-not-todo event-if-todo event-if-todo-not-done todo-due)
          org-icalendar-use-scheduled
          '(event-if-not-todo event-if-todo event-if-todo-not-done todo-start))
    )
  (use-package org-caldav
    :after (async)
    :config
    (setq org-caldav-url "https://dong.mk/radicale/mkvoya/")
    ;; (setq org-caldav-url "https://mail.sjtu.edu.cn/dav/mingkaidong@sjtu.edu.cn/Calendar")
    (setq org-caldav-calendar-id "f846603c-c54c-c73f-f009-e7331ef16216")
    (setq org-caldav-inbox "~/Dropbox/Dreams/Org/Caldav.inbox.org")
    (setq org-caldav-files '("~/Dropbox/Dreams/Org/IPADS.sched.org"
                             "~/Dropbox/Dreams/Org/Main.org"
                             "~/Dropbox/Dreams/Org/Inbox.org"
                             ))
    ;; (setq org-icalendar-timezone "America/Los_Angeles")
    (setq org-icalendar-timezone "Asia/Shanghai")
    )
#+END_SRC
*** Org publish
#+BEGIN_SRC emacs-lisp
  ;;; Org Publish
  (use-package ox-publish
    :straight nil
    :after (org)
    :config
    (setq org-publish-project-alist
          '(
            ("org-notes"
             :base-directory "~/Dropbox/Dreams/Org/Public"
             :base-extension "org"
             :publishing-directory "/Volumes/ramfs/public_html/"
             :recursive t
             :publishing-function org-html-publish-to-html
             :headline-levels 4             ; Just the default for this project.
             :auto-preamble t
             )
            ("org-static"
             :base-directory "~/Dropbox/Dreams/Org/Public"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
             :publishing-directory "/Volumes/ramfs/public_html/"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("org" :components ("org-notes" "org-static"))
            )))
#+END_SRC
*** Capture
#+BEGIN_SRC emacs-lisp
  (defun mkvoya/create-capture-file()
    "Create org file on-the-fly."
    (interactive)
    (let ((name (read-string "Filename: ")))
      (expand-file-name (format "%s.org" name)
                        "~/Dropbox/Dreams/Org/Collections")))
  ;;; Captures
  (use-package org-capture
    :straight nil
    :after (org)
    :config
    (setq org-capture-templates nil)
    (add-to-list 'org-capture-templates
                 '("j" "Journals" entry
                   (file+datetree "~/Dropbox/Dreams/Org/Journals/Index.org" "Journals")
                   "* %U - %^{heading}\n  %?"))
    ;; (setq org-default-notes-file "~/Dropbox/Dreams/Org/Inbox.org")
    (add-to-list 'org-capture-templates
                 '("t" "Tasks" entry
                   (file+headline "~/Dropbox/Dreams/Org/Inbox.org" "Tasks")
                   "* TODO %?\nADDED: %u\n%a"))
    (add-to-list 'org-capture-templates
                 '("b" "Bookmarks" entry
                   (file+datetree "~/Dropbox/Dreams/Org/Collections/Bookmarks.org" "Bookmarks")
                   "* %U - %^{title}\nADDED: %U\n%?"))
    (add-to-list 'org-capture-templates
                 '("p" "Plans" entry
                   (file+olp+datetree "~/Dropbox/Dreams/Org/Plans.org" "Plans")
                   "* TODO %T %^{Heading}\n  %^{EFFORT}p %?" :time-prompt t :tree-type week :empty-lines 1))
    (add-to-list 'org-capture-templates
                 '("c" "Collection" entry
                   (file mkvoya/create-capture-file)
                   "<org"))
    )
#+END_SRC
*** OrgRoam
#+BEGIN_SRC emacs-lisp
  (setq org-roam-v2-ack t)
  (use-package org-roam
    :after (org)
    :defer
    :custom
    (org-roam-directory "~/Dropbox/Dreams/Org/")
    (org-roam-link-file-path-type 'relative)
    (org-roam-file-exclude-regexp "flycheck_.*\\.org$") ;; Avoid false duplication caused by flycheck temporary files.
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (setq org-roam-rename-file-on-title-change nil)
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
#+END_SRC
*** OrgRoam-Server
# org-roam-server does not support org-roam v2, use org-roam-ui instead.
#+BEGIN_SRC emacs-lisp
  (use-package websocket)
  (use-package simple-httpd)
  (use-package org-roam-ui
    :after (org-roam)
    :straight (:host github :repo "org-roam/org-roam-ui" :files ("*.el" "out"))
    ;; :hook
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

  ;; Since the org module lazy loads org-protocol (waits until an org URL is
  ;; detected), we can safely chain `org-roam-protocol' to it.
  (use-package org-roam-protocol
    :straight nil
    :after (org-protocol org-roam))
#+END_SRC
*** Org-Mindmap
#+BEGIN_SRC emacs-lisp
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  (use-package org-mind-map
    :init (require 'ox-org)
    ;; Uncomment the below if 'ensure-system-packages` is installed
    ;;:ensure-system-package (gvgen . graphviz)
    :config
    (setq org-mind-map-engine "dot")       ; Default. Directed Graph
    ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
    ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
    ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
    ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
    ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
    ;; (setq org-mind-map-engine "circo")  ; Circular Layout
    (setq org-mind-map-default-edge-attribs '(("color" . "blue")
                                              ("headport" . "w")
                                              ("tailport" . "e")
                                              ("tailclip" . "no")
                                              ("headclip" . "no")
                                              ("arrowhead" . "none")))
    (setq org-mind-map-default-node-attribs '(("shape" . "plain")
                                              ("color" . "white")))
    (setq org-mind-map-default-graph-attribs '(("nodesep" . "0.75")
                                               ("overlap" . "false")
                                               ("spline" . "true")
                                               ("rankdir" . "LR")))
    (setq org-mind-map-unflatten-command "unflatten -l1")
    )
#+END_SRC

*** org-roam-bibtex
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-bibtex
    :after org-roam
    :config
    (require 'org-ref)
    )
#+END_SRC

*** Org-transclusion

#+BEGIN_SRC emacs-lisp
  (use-package org-transclusion
    :after org)
  ;; :bind (("<f12>" . #'org-transclusion-add))
  ;; ("C-n t" . #'org-transclusion-mode)
#+END_SRC
*** NotDeft
#+BEGIN_SRC emacs-lisp
  (use-package notdeft
    :straight (:host github :repo "hasu/notdeft" :files ("*.el" "xapian"))
    :config
    (setq notdeft-directories '("~/Dropbox/Dreams" "~/Dropbox/IPADS"))
    (setq notdeft-extension "org")
    (setq notdeft-secondary-extensions '("md" "txt" "scrbl"))
    (setq notdeft-allow-org-property-drawers t)
    )
#+END_SRC
** Others
*** Input Method
| pyim | https://github.com/tumashu/pyim |
#+BEGIN_SRC emacs-lisp
  (use-package pyim
    :ensure nil
    :demand t
    :after (evil)
    :config
    ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
    (use-package pyim-basedict
      :ensure nil
      :config (pyim-basedict-enable))

    (setq default-input-method "pyim")
    ;; (setq pyim-default-scheme 'quanpin)
    (setq pyim-default-scheme 'pyim-shuangpin)

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'posframe)
    ;; (setq pyim-page-tooltip 'popup)
    ;; 选词框显示5个候选词
    (setq pyim-page-length 5)
    (defun mk/forward-word()
      "mk's better forward-word."
      (interactive)
      (if (char-equal (char-after) (string-to-char " "))
          (while (char-equal (char-after) (string-to-char " "))
            (right-char 1))
        (pyim-forward-word)))
    (define-key evil-motion-state-map (kbd "w") #'mk/forward-word)
    (define-key evil-motion-state-map (kbd "b") #'pyim-backward-word)
)

#+END_SRC
*** Sis

*** Custom key-bindings
#+BEGIN_SRC emacs-lisp
  ;; from https://stackoverflow.com/questions/1250846/wrong-type-argument-commandp-error-when-binding-a-lambda-to-a-key
  (global-set-key (kbd "C-c h") (lambda () (interactive) (find-file "~/Dropbox/Dreams/Org/Main.org")))
  (global-set-key (kbd "M-s-<left>") 'tab-previous)
  (global-set-key (kbd "M-s-<right>") 'tab-next)
  (global-set-key (kbd "M-s-n") 'tab-new)
  (global-set-key (kbd "C-c w") (lambda () (interactive) (find-file "~/Dropbox/Dreams/Org/Weights.org")))
  ;; Open ibuffer upon "C-c i"
  (global-set-key (kbd "C-c i") 'ibuffer)
  ;; (global-set-key (kbd "C-c C-m e") (lambda () (interactive) (find-file "~/.emacs.d/emacs-config.org")))
  ;; (global-unset-key [mouse-3])
  ;; (global-set-key [down-mouse-3]
  ;;                 `(menu-item ,(purecopy "Menu Bar") ignore
  ;;                             :filter (lambda (_)
  ;;                                       (if (zerop (or (frame-parameter nil 'menu-bar-lines) 0))
  ;;                                           (mouse-menu-bar-map)
  ;;                                         (mouse-menu-major-mode-map)))))
#+END_SRC
*** Custom functions

#+BEGIN_SRC emacs-lisp
  ;; From https://emacs.stackexchange.com/questions/47627/identify-buffer-by-part-of-its-name
  (defun switch-to-existing-buffer-other-window (part)
    "Switch to buffer with PART in its name."
    (interactive
     (list (read-buffer-to-switch "Switch to buffer in other window: ")))
    (let ((candidates
           (cl-remove
            nil
            (mapcar (lambda (buf)
                      (let ((pos (string-match part (buffer-name buf))))
                        (when pos
                          (cons pos buf))))
                    (buffer-list)))))
      (unless candidates
        (user-error "There is no buffers with %S in its name." part))
      (setq candidates (cl-sort candidates #'< :key 'car))
      (switch-to-buffer-other-window (cdr (car candidates)))))

  (defun mkvoya/open-orgroam-panel()
    "Open the Org-roam client at [http://127.0.0.1:8001]."
    (interactive)
    (progn
      ;; Ensure the server is running.
      (unless (org-roam-server-mode)
        (org-roam-server-mode 1))
      ;; Ensure the session is running.
      (xwidget-webkit-browse-url "http://127.0.0.1:8001" nil)
      ;; Switch to the buffer
      (switch-to-existing-buffer-other-window "Roam Server")
      ))
#+END_SRC
** EL
#+BEGIN_SRC emacs-lisp
  (setq source-directory (expand-file-name "~/Library/Caches/Homebrew/emacs-plus@29--git/"))
#+END_SRC


* 3rd-party
** Word count
#+BEGIN_SRC emacs-lisp
  (defvar wc-regexp-chinese-char-and-punc
    (rx (category chinese)))
  (defvar wc-regexp-chinese-punc
    "[。，！？；：「」『』（）、【】《》〈〉※—]")
  (defvar wc-regexp-english-word
    "[a-zA-Z0-9-]+")

  (defun wc ()
    "「較精確地」統計中/日/英文字數。
  - 文章中的註解不算在字數內。
  - 平假名與片假名亦包含在「中日文字數」內，每個平/片假名都算單獨一個字（但片假
    名不含連音「ー」）。
  - 英文只計算「單字數」，不含標點。
  - 韓文不包含在內。

  ※計算標準太多種了，例如英文標點是否算入、以及可能有不太常用的標點符號沒算入等
  。且中日文標點的計算標準要看 Emacs 如何定義特殊標點符號如ヴァランタン・アルカン
  中間的點也被 Emacs 算為一個字而不是標點符號。"
    (interactive)
    (let* ((v-buffer-string
            (progn
              (if (eq major-mode 'org-mode) ; 去掉 org 文件的 OPTIONS（以#+開頭）
                  (setq v-buffer-string (replace-regexp-in-string "^#\\+.+" ""
                                                                  (buffer-substring-no-properties (point-min) (point-max))))
                (setq v-buffer-string (buffer-substring-no-properties (point-min) (point-max))))
              (replace-regexp-in-string (format "^ *%s *.+" comment-start) "" v-buffer-string)))
                                          ; 把註解行刪掉（不把註解算進字數）。
           (chinese-char-and-punc 0)
           (chinese-punc 0)
           (english-word 0)
           (chinese-char 0))
      (with-temp-buffer
        (insert v-buffer-string)
        (goto-char (point-min))
        ;; 中文（含標點、片假名）
        (while (re-search-forward wc-regexp-chinese-char-and-punc nil :no-error)
          (setq chinese-char-and-punc (1+ chinese-char-and-punc)))
        ;; 中文標點符號
        (goto-char (point-min))
        (while (re-search-forward wc-regexp-chinese-punc nil :no-error)
          (setq chinese-punc (1+ chinese-punc)))
        ;; 英文字數（不含標點）
        (goto-char (point-min))
        (while (re-search-forward wc-regexp-english-word nil :no-error)
          (setq english-word (1+ english-word))))
      (setq chinese-char (- chinese-char-and-punc chinese-punc))
      (message
       (format "中日文字數（不含標點）：%s
  中日文字數（包含標點）：%s
  英文字數（不含標點）：%s
  =======================
  中英文合計（不含標點）：%s"
               chinese-char chinese-char-and-punc english-word
               (+ chinese-char english-word)))))
#+END_SRC
** Posts & Blogs
#+BEGIN_SRC emacs-lisp
  (use-package org-static-blog
    :defer t
    :config

    (setq org-static-blog-publish-title "Mika, Mika, Mika!")
    (setq org-static-blog-publish-url "https://blog.dong.mk/")
    (setq org-static-blog-publish-directory "~/Dropbox/Dreams/Org/Blog/Publish/")
    (setq org-static-blog-posts-directory "~/Dropbox/Dreams/Org/Blog/Posts/")
    (setq org-static-blog-drafts-directory "~/Dropbox/Dreams/Org/Blog/Drafts/")
    (setq org-static-blog-use-preview t) ; enable preview

    ;; Use “#+filetags: τ₁ τ₂ … τₙ”
    (setq org-static-blog-enable-tags t)

    ;; I'd like to have tocs and numbered headings
    (setq org-export-with-toc t)
    (setq org-export-with-section-numbers t)

    (setq org-static-blog-page-header
          "<meta name=\"author\" content=\"Mingkai Dong\">
               <meta name=\"referrer\" content=\"no-referrer\">
               <link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
               <link rel=\"icon\" href=\"static/favicon.ico\">")

    (setq org-static-blog-page-preamble
          "<div class=\"header\">
            <a href=\"https://blog.dong.mk\">Mika, Mika, Mika.</a>
          </div>")

    (setq org-static-blog-page-postamble
          "<div id=\"archive\">
       <a href=\"https://blog.dong.mk/archive.html\">Other posts</a>
     </div>
     <center></center>")

    (setq org-static-blog-index-front-matter
          "<h1> Hey it is </h1>\n")
    )
#+END_SRC

* MISC
#+BEGIN_SRC emacs-lisp
  (use-package marquee-header :defer 10) ;; This is really an interesting package.
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package image-click-mode
    :ensure nil
    :after (org)
    :defer 10
    :straight (:host github :repo "mkvoya/image-click-mode" :files ("*.el"))
    :config
    (setq org-image-actual-width 400)
    (add-hook 'org-mode-hook (lambda () (image-click-mode))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package citre
    :defer 10
    :init
    ;; This is needed in `:init' block for lazy load to work.
    (require 'citre-config)
    ;; Bind your frequently used commands.
    (global-set-key (kbd "C-x c j") 'citre-jump)
    (global-set-key (kbd "C-x c J") 'citre-jump-back)
    (global-set-key (kbd "C-x c p") 'citre-ace-peek)
    (global-set-key (kbd "C-]") 'citre-jump)
    (global-set-key (kbd "C-t") 'citre-jump-back)
    :config
    (setq
     ;; Set this if readtags is not in your path.
     ;; citre-readtags-program "/path/to/readtags"
     ;; Set this if you use project management plugin like projectile.  It's
     ;; only used to display paths relatively, and doesn't affect actual use.
     citre-project-root-function #'projectile-project-root))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;;  (set-fontset-font t 'unicode (font-spec :family "Cascadia Code PL" :size 14))
  (set-fontset-font t '(#x2ff0 . #x9ffc) (font-spec :name "TsangerJinKai01" :size 14))
  ;; (defun set-fonts ()
  ;;   (interactive)
  ;;   (set-face-attribute 'default nil :font (font-spec :family "Cascadia Code PL" :size 14))
  ;;   (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji" :size 14))
  ;;   (set-fontset-font t '(#x2ff0 . #x9ffc) (font-spec :family "Sarasa Mono Slab SC" :size 14))
  ;;   )
  ;; (add-hook window-setup-hook 'set-fonts)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package chronos)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package telega
    :defer 10
    :config
    (setq telega-proxies
          (list
           '(:server "127.0.0.1" :port 7890 :enable t
                     :type (:@type "proxyTypeSocks5"))
           )))
  ;; goood
#+END_SRC

* Emacs

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC

* A mode to embed one buffer in another buffer and keep them in sync
#+BEGIN_SRC emacs-lisp
  (use-package freex
    :straight (emacs-freex :host github
                           :repo "gregdetre/emacs-freex")
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil :font "Sarasa Mono SC-14")
  ;; (set-face-attribute 'fixed-pitch nil :font "Sarasa Mono SC-14")
  ;; (set-face-attribute 'variable-pitch nil :font "Sarasa Mono SC-14")

  ;; (dolist (face '(default fixed-pitch))
  ;;   (set-face-attribute `,face nil :font "Sarasa Mono SC-14"))
#+END_SRC

#+begin_src emacs-lisp
  (use-package ns-win
    :straight nil
    :config
    (setq mac-right-command-modifier 'control))
#+end_src

#+begin_src emacs-lisp
  (use-package read-aloud
    :config
    (setq read-aloud-engine "say"))
#+end_src


#+BEGIN_SRC emacs-lisp

  (use-package emacs-badge
    :straight (:type git :host github :repo "mkvoya/emacs-badge" :files ("*"))
    )

#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package popweb
    :straight (:type git :host github :repo "manateelazycat/popweb" :files ("*"))
    :config
    (setq popweb-root (file-name-directory (locate-library "popweb.el")))
    (add-to-list 'load-path (concat popweb-root "extension/latex"))
    (require 'popweb-latex)
    (add-to-list 'load-path (concat popweb-root "extension/dict"))
    (require 'popweb-dict-bing)
    (require 'popweb-dict-youdao)
    )
#+END_SRC

* A Gantt Chart (Calendar) for Org Mode
#+begin_src emacs-lisp
  (use-package dash)
  (use-package ts)
  (use-package s)
  (use-package org-ql
    :after (ts))
  (use-package elgantt
    :after (org org-ql dash ts s)
    :straight (:type git :host github :repo "legalnonsense/elgantt")
    )
#+end_src


#+BEGIN_SRC emacs-lisp
  ;; My source code for bib
  (setq paper-root-dir "~/Dropbox/Dreams/Research/Papers")
  (defun paper-add()
    "Add a paper to your Dreamland."
    (interactive)
    (let* ((base-dir paper-root-dir)
           (conf (string-trim (read-string "Enter the conference abbrivation with year: ")))
           (title (string-trim (read-string "The paper title: ")))
           (filename (replace-regexp-in-string ":" "," title))
           (filepath (concat base-dir "/" conf "/" filename)))
      (make-directory filepath t)
      (find-file filepath)
      )
    )

  (defun paper-root()
    "Open the paper root."
    (interactive)
    (find-file paper-root-dir))

  (defun topic-root()
    "Open the research topic root."
    (interactive)
    (find-file "~/Dropbox/Dreams/Research/ByTopic"))

  (require 'consult)
  (defun paper-find (&optional initial)
    "Search a paper in your Dreamland, by title, with INITIAL input."
    (interactive "P")
    (consult-find paper-root-dir initial))
  ;; :prompt "Dreamland's Paper > "

  (defun paper-open()
    "Open the file in PDF Expert. Code borrowed from the crux package."
    (interactive)
    (let ((current-file-name
           (if (eq major-mode 'dired-mode)
               (dired-get-file-for-visit)
             buffer-file-name)))
      (call-process "open" nil 0 nil "-a" "/Applications/PDF Expert.app" current-file-name))
    )

  ;;; Automatically choose the file to link with according to the selected text.
  (defvar autolink-directory "~/Dropbox/Dreams")
  (defun autolink--get-candidates (text)
    "Search for the file name with TEXT."
    (let* ((cmd (concat "find " autolink-directory " -iname \"*" (string-replace ":" "?" text) "*\""))
           (candidates (mapcar 'abbreviate-file-name (delete "" (split-string (shell-command-to-string cmd) "\n")))))
      (completing-read "Choose the one to link: " candidates)))
  (defun paper-link (start end)
    "Try to guess the file to link according to the region between START and END."
    (interactive "r") ; The "r" here will fill the start and end automatically.
    (let* ((text (buffer-substring start end))
           (file (autolink--get-candidates text)))
      (goto-char end)
      (insert "]]")
      (goto-char start)
      (insert (concat "[[" file "]["))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package reveal-in-osx-finder)
  (use-package crux)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :config
    (defun vterm-new()
      "Add a new vterm session with given name."
      (interactive)
      (let ((session-name (string-trim (read-string "Enter the name for the session: "))))
        (vterm session-name)
        )
      )
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package xkcd)
  (use-package emacs
    :config
    (pixel-scroll-precision-mode)
    (setq delete-by-moving-to-trash t)
    )
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package ranger :disabled t)
  (use-package eaf :disabled t)
  (use-package peep-dired :disabled t) ; preview files in dired
  (use-package maple-explorer :disabled t)
  (use-package nox :disabled t) ; LSP-server alternatives: lsp-mode and elgot
  (use-package org-brain :disabled t)
  (use-package deft :disabled t)
  (use-package zettledeft :disabled t)
  (use-package org-real :disabled t) ; https://gitlab.com/tygrdev/org-real
  (use-package explain-pause-mode :disabled t)
  (use-package keystrokes :disabled t
    :straight (:type git :host gitlab :repo "marcowahl/keystrokes"))
  (use-package netease-cloud-music :disabled t
    :straight (:host github :repo "SpringHan/netease-cloud-music.el"))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; Speedup the C++ file over Tramp.
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-ignore-dir-regexp
        (format "%s\\|%s"
                vc-ignore-dir-regexp
                tramp-file-name-regexp))
  (setq tramp-verbose 1)

  ;; Projectile optimizations over Tramp.
  (defadvice projectile-project-root (around ignore-remote first activate)
    (unless (file-remote-p default-directory) ad-do-it))

  (defun insert-datetime()
    "Insert the current date and time."
    (interactive)
    (insert (format-time-string "%F %T")))

#+END_SRC

Interesting Colors:

(setq colorrrrs '("#383a42" "#fafafa" "#A6E22E" "#272822" "#fafafa" "#e45649"
"#50a14f" "#986801" "#4078f2" "#a626a4" "#0184bc" "#383a42" "#F92672" "#CF4F1F"
"#C26C0F" "#E6DB74" "#AB8C00" "#A18F00" "#989200" "#8E9500" "#A6E22E" "#729A1E"
"#609C3C" "#4E9D5B" "#3C9F79" "#A1EFE4" "#299BA6" "#2896B5" "#2790C3" "#66D9EF"
"#99aaff"))



#+BEGIN_SRC emacs-lisp
  (use-package adoc-mode
    :straight (:host github :repo "sensorflo/adoc-mode"))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun make-frame-undecorated ()
    "Make a frame that is undecorated (borderless)."
    (interactive)
    (make-frame '((undecorated . 1)))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun is-floating-frame(f)
    (equal (frame-parameter f 'name) "*Floating*")
    )
  (defun get-floating-frame()
    (car (filtered-frame-list #'is-floating-frame)))
  (defun toggle-floating-frame ()
    "Make/Delete a frame that is floating."
    (interactive)
    ;; ((w (display-pixel-width))
    ;; (h (/ (display-pixel-height) 2)))
    (let* ((geo (cdr (assq 'geometry (car (display-monitor-attributes-list)))))
           (x (nth 0 geo))
           (y (nth 1 geo))
           (w (nth 2 geo))
           (h (nth 3 geo))
           (f (get-floating-frame)))
      (unless f
        (setq f (make-frame '((undecorated . 1)
                              (name . "*Floating*")))))
      (if (frame-visible-p f)
          (progn
            (make-frame-invisible f))
        (progn
          (set-frame-position f 0 0)
          (set-frame-size f w (/ h 2) t)
          (make-frame-visible f)
          (select-frame f)
          (select-frame-set-input-focus f)
          (call-interactively (global-key-binding "\M-x")))
        )))

  (use-package popwin
    :disabled t
    :config
    (popwin-mode 1)
    )

#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (setq helm-display-function 'helm-display-buffer-in-own-frame)


    (defun md/alfred-source-system ()
      (helm-build-sync-source "System"
        :multimatch nil
        :requires-pattern nil
        :candidates '(("Lock" . "xset dpms force off")  ;; turns laptop screen off and triggers i3lock
                      ("Sleep" . "systemctl suspend -i")
                      ("Restart" . "systemctl reboot -i")
                      ("Shutdown" . "systemctl poweroff -i"))
        :action '(("Execute" . (lambda (candidate)
                                 (shell-command (concat candidate " >/dev/null 2>&1 & disown") nil nil))))))

    (defun md/alfred-source-apps ()
      (helm-build-sync-source "Apps"
        :multimatch nil
        :requires-pattern nil
        :candidates (lambda ()
                      (-map
                       (lambda (item)
                         (s-chop-suffix ".desktop" item))
                       (-filter (lambda (d) (not (or (string= d ".") (string= d ".."))))
                                (directory-files "/usr/share/applications"))))
        :action '(("Launch" . (lambda (candidate)
                                (shell-command (concat "gtk-launch " candidate " >/dev/null 2>&1 & disown") nil nil))))))

    (defvar md/alfred-source-search-candidates
      '(("DuckDuckGo" . ("d" . "https://www.duckduckgo.com/?q=%s"))
        ("Google" . ("g" . "https://www.google.co.uk/search?q=%s"))))

    (defun md/strip-first-word (s)
      "Remove the first word from a string"
      (string-remove-prefix (format "%s " (car (split-string s))) s))

    (defun md/alfred-source-search ()
      (helm-build-sync-source "Search"
        :nohighlight t
        :nomark t
        :multimatch nil
        :requires-pattern t
        :candidates md/alfred-source-search-candidates
        ;; Count it as a match if the prefix matches, eg. "d ..."
        :match '((lambda (candidate)
                   (string= (car (cdr (assoc candidate md/alfred-source-search-candidates)))
                            (car (split-string helm-pattern)))))
        :fuzzy-match nil
        ;; Instead of displaying the exact thing that you type, display "DuckDuckGo: %s..."
        :filtered-candidate-transformer '((lambda (candidates source)
                                            (map 'list (lambda (c)
                                                         (cons (format "%s: %s" (car c)
                                                                       (md/strip-first-word helm-pattern)) (cdr c)))
                                                 candidates)))
        ;; Build the URL, replacing %s with your input. Open it with browse-url.
        :action '(("Search" . (lambda (candidate)
                                (browse-url (format (cdr candidate) ;; the url
                                                    (url-hexify-string
                                                     ;; This removes the "g " part from the string
                                                     (md/strip-first-word helm-pattern)))))))))

    (defun md/alfred ()
      (interactive)
      (with-current-buffer (get-buffer-create "*alfred*")
        (let ((frame (make-frame '((name . "alfred")
                                   ;; (window-system . ns)
                                   (auto-raise . t) ; focus on this frame
                                   (height . 10)
                                   (internal-border-width . 20)
                                   (left . 0.33)
                                   (left-fringe . 0)
                                   (line-spacing . 3)
                                   (menu-bar-lines . 0)
                                   (right-fringe . 0)
                                   (tool-bar-lines . 0)
                                   (top . 48)
                                   (undecorated . t) ; enable to remove frame border
                                   (unsplittable . t)
                                   (vertical-scroll-bars . nil)
                                   (width . 110))))
              (alert-hide-all-notifications t)
              (inhibit-message t)
              (mode-line-format nil)
              (helm-mode-line-string nil)
              (helm-full-frame t)
              (helm-display-header-line nil)
              (helm-use-undecorated-frame-option nil))
          (helm :sources (list (md/alfred-source-system)
                               (md/alfred-source-apps)
                               (md/alfred-source-search))
                :prompt ""
                :buffer "*alfred*")
          (delete-frame frame)
          ;; If we don't kill the buffer it messes up future state.
          (kill-buffer "*alfred*")
          ;; I don't want this to cause the main frame to flash
          (x-urgency-hint (selected-frame) nil))))
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package paper
    :disabled t
    ;; LIBS = gtk+-3.0 cairo fontconfig lcms2 zlib jbig2dec libjpeg freetype2 mujs gumbo harfbuzz libopenjp2
    ;; CFLAGS += -lmupdf -lmupdf-third
    :straight (:host github :repo "ymarco/paper-mode" :files("*.el" "*.so"))
    ;; you could also add html, png, jpg
    :mode ("\\.pdf\\'"  . paper-mode)
    :mode ("\\.epub\\'"  . paper-mode)
    :mode ("\\.cbz\\'"  . paper-mode)
    :config
    ;; https://github.com/emacs-evil/evil-collection/issues/60
    (setq evil-want-keybinding nil)
    (use-package evil-collection
      :after (evil))
    (use-package evil-collection-paper
      :after (evil-collection)
      :straight nil
      :config
      (evil-collection-paper-setup))
    )

  (use-package hl-line
    :config
    (global-hl-line-mode t)
    (set-face-background 'hl-line "#d0fed0")
    (set-face-foreground 'hl-line nil)
    (set-face-foreground 'highlight nil))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Python Support
  (use-package elpy)
  (use-package py-autopep8
    :config
    (setq py-autopep8-options '("--max-line-length=120")))
  (use-package blacken
    :config
    (setq blacken-line-length 120))
  (use-package ein)
  (use-package live-py-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode)
(use-package vue-mode)
#+END_SRC


#+BEGIN_SRC emacs-lisp

  (use-package tab-bar
    :config
    (defun tab-bar-padding-left()
      "                ")
    (setq tab-bar-format
          '(tab-bar-padding-left
            tab-bar-format-history
            tab-bar-format-tabs
            tab-bar-separator
            tab-bar-format-add-tab))
    (set-face-attribute
     'tab-bar nil
     :background "white"
     :height 1.2
     :font (font-spec :family "Sans Serif" :size 16))
     ;; :font (font-spec :family "Heiti SC" :weight 'normal :size 18)
    (tab-bar-mode 1)
    )

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package transclusion-minor-mode
    :disabled t
    :straight (:host github :repo "whacked/transclusion-minor-mode"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package gitlab-ci-mode)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package send-to-osx-grammarly
    :disabled t ; Actually, it's not too complex to copy the text to grammarly by hand
    :straight (:host github :repo "mmagnus/emacs-grammarly")
    :bind (("C-c C-g h" . #'send-to-osx-grammarly-push)
           ("C-c C-g l" . #'send-to-osx-grammarly-pull)))
#+END_SRC
